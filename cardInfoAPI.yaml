openapi: 3.1.0
info:
  version: 0.7
  title: Common Card Info API (Public)
  description: >
    This specification defines a common card info API for payment cards used in Switzerland.
    The API is supposed to be used to retrieve payment card infos (read only).
  # TODO update description
  contact:
    email: info@common-api.ch
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://card.common-api.ch
externalDocs:
  description: Find out more about SFTI API specifications
  url: https://www.common-api.ch

# TODO make more detailed description
tags:
  - name: Cards
    description: Operations related with managing cards
  - name: Card-tokens
    description: Operations related with managing card tokens
  - name: Transactions
    description: Operations related with retrieving card transactions

security:
  - ApiKeyAuth: []
  - OAuth2:
      - read
      - write

paths:
  /cards:
    get:
      tags:
        - Cards
      summary:  # TODO
      description:  # TODO
      parameters:
        - in: query
          name: contract_reference
          required: true
          schema:
            $ref: '#/components/schemas/ContractReference'
        - in: query
          name: person_reference
          required: true
          schema:
            $ref: '#/components/schemas/PersonReference'
        - in: query
          name: card_id
          required: true
          schema:
            $ref: '#/components/schemas/CardId'
        - in: query
          name: card_status
          required: true
          schema:
            $ref: '#/components/schemas/CardStatus'
        - in: query
          name: card_account_id
          required: false
          schema:
            $ref: '#/components/schemas/CardAccountId'
        - in: query
          name: bank_account_reference
          required: false
          schema:
            $ref: '#/components/schemas/BankAccountReference'
      responses:
        '200':
          description:  # TODO
          headers:
            # TODO headers?
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDetails'
        # TODO which standard error responses should be removed?
        '400':
          $ref: '#/components/responses/standard400'
        '401':
          $ref: '#/components/responses/standard401'
        '403':
          $ref: '#/components/responses/standard403'
        '404':
          $ref: '#/components/responses/standard404'
        '405':
          $ref: '#/components/responses/standard405'
        '500':
          $ref: '#/components/responses/standard500'
        '501':
          $ref: '#/components/responses/standard501'
        '503':
          $ref: '#/components/responses/standard503'

  /card-tokens:
    get:
      tags:
        - Card-tokens
      summary:  # TODO
      description:  # TODO
      parameters:
        - in: query
          name: token_id
          required: true
          schema:
            $ref: '#components/schemas/TokenId'
        - in: query
          name: funding_card_id
          required: true
          schema:
            $ref: '#components/schemas/FundingCardId'
        - in: query
          name: token_status
          required: true
          schema:
            $ref: '#components/schemas/TokenStatus'
      responses:
        '200':
          description:  # TODO
          headers:
            # TODO headers?
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardTokenDetails'
        # TODO which standard error responses should be removed?
        '400':
          $ref: '#/components/responses/standard400'
        '401':
          $ref: '#/components/responses/standard401'
        '403':
          $ref: '#/components/responses/standard403'
        '404':
          $ref: '#/components/responses/standard404'
        '405':
          $ref: '#/components/responses/standard405'
        '500':
          $ref: '#/components/responses/standard500'
        '501':
          $ref: '#/components/responses/standard501'
        '503':
          $ref: '#/components/responses/standard503'

  /card-transactions:
    get:
      tags:
        - Card-tokens
      summary:  # TODO
      description:  # TODO
      parameters:
        - in: query
          name: transaction_id
          required: false
          schema:
            type: string
            maxLength: 50
            example: 9e19df54-47cb-494b-84dc-1c126e95a05c
          description: Unique identifier for booked transactions; Id does not overlap with authorizationId; at least one of authorizationId or transactionId is always present.
        - in: query
          name: authorization_id
          required: false
          schema:
            type: string
            maxLength: 50
            example: 9e19df54-47cb-494b-84dc-1c126e95a05c  # TODO use unique values if not indicating same parameters to avoid confusions?
          description: Unique identifier for authorized transactions; Id does not overlap with transactionId; at least one of authorizationId or transactionId is always present.
      responses:
        '200':
          description:  # TODO
          headers:
            # TODO headers?
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardTokenDetails'
        # TODO which standard error responses should be removed?
        '400':
          $ref: '#/components/responses/standard400'
        '401':
          $ref: '#/components/responses/standard401'
        '403':
          $ref: '#/components/responses/standard403'
        '404':
          $ref: '#/components/responses/standard404'
        '405':
          $ref: '#/components/responses/standard405'
        '500':
          $ref: '#/components/responses/standard500'
        '501':
          $ref: '#/components/responses/standard501'
        '503':
          $ref: '#/components/responses/standard503'

components:
  schemas:
    CardDetails:
      title:  # TODO
      description:  #TODO
      type: object
      required:
        - contract_reference
        - person_reference
        - card_id
        - embossing_line_1
        - embossing_line_2
        - pan_4_digits
        - expiry_date
        - card_status
        - currency
        - image
        - product_id
        - product_name
        - scheme
        - issuing_type
        - product_type
        - product_line
        - card_limit_cycle
        - card_limit_daily
        - issuer_id
        - issuer_name
        - language
      properties:
        contract_reference:
          $ref: '#/components/schemas/ContractReference'
        person_reference:
          $ref: '#/components/schemas/PersonReference'
        card_id:
          $ref: '#/components/schemas/CardId'
        embossing_line_1:
          $ref: '#/components/schemas/EmbossingLine1'
        embossing_line_2:
          $ref: '#/components/schemas/EmbossingLine2'
        pan_4_digits:
          $ref: '#/components/schemas/Pan4Digits'
        expiry_date:
          $ref: '#/components/schemas/ExpiryDate'
        initial_issuing_date:
          $ref: '#/components/schemas/InitialIssuingDate'
        card_status:
          $ref: '#/components/schemas/CardStatus'
        currency:
          $ref: '#/components/schemas/Currency'
        image:
          $ref: '#/components/schemas/Image'
        product_id:
          $ref: '#/components/schemas/ProductId'
        product_name:
          $ref: '#/components/schemas/ProductName'
        scheme:
          $ref: '#/components/schemas/Scheme'
        category:
          $ref: '#/components/schemas/Category'
        issuing_type:
          $ref: '#/components/schemas/IssuingType'
        product_type:
          $ref: '#/components/schemas/ProductType'
        product_line:
          $ref: '#/components/schemas/ProductLine'
        card_limit_cycle:
          $ref: '#/components/schemas/CardLimitCycle'
        card_limit_daily:
          $ref: '#/components/schemas/CardLimitDaily'
        card_account_id:
          $ref: '#/components/schemas/CardAccountId'
        bank_account_reference:
          $ref: '#/components/schemas/BankAccountReference'
        issuer_id:
          $ref: '#/components/schemas/IssuerId'
        issuer_name:
          $ref: '#/components/schemas/IssuerName'
        distribution_partner_id:
          $ref: '#/components/schemas/DistributionPartnerId'
        distribution_partner_name:
          $ref: '#/components/schemas/DistributionPartnerName'
        language:
          $ref: '#/components/schemas/Language'

  CardTokenDetails:
    title:  # TODO
    description:  #TODO
    type: object
    required:
      - token_id
      - token_pan_4_digits
      - token_requestor_id
      - token_requestor_name
      - funding_card_id
      - token_status
      - token_issuing_date
      - token_scheme
    properties:
      token_id:
        $ref: '#/components/schemas/TokenId'
      token_pan_4_digits:
        $ref: '#/components/schemas/TokenPan4Digits'
      wallet_id:
        $ref: '#/components/schemas/WalletId'
      wallet_name:
        $ref: '#/components/schemas/WalletName'
      token_requestor_id:
        $ref: '#/components/schemas/TokenRequestorId'
      token_requestor_name:
        $ref: '#/components/schemas/TokenRequestorName'
      device_name:
        $ref: '#/components/schemas/DeviceName'
      device_type:
        $ref: '#/components/schemas/DeviceType'
      funding_card_id:
        $ref: '#/components/schemas/FundingCardId'
      token_status:
        $ref: '#/components/schemas/TokenStatus'
      token_issuing_date:
        $ref: '#/components/schemas/TokenIssuingDate'
      token_scheme:
        $ref: '#/components/schemas/TokenScheme'

  TransactionDetails:
    title:  # TODO
    description:  #TODO
    type: object
    required:
      - transaction_date_time
      - valuta_date
      - transaction_status
      - original_amount
      - original_currency
      - total_amount
      - transaction_amount
      - transaction_currency
      - mcc
      - mcc_description
      - transaction_category
      - card_id
    properties:
      transaction_id:
        $ref: '#/components/schemas/TransactionId'
      authorization_id:
        $ref: '#/components/schemas/AuthorizationId'
      transaction_date_time:
        $ref: '#/components/schemas/TransactionDateTime'
      valuta_date:
        $ref: '#/components/schemas/ValutaDate'
      statement_date:
        $ref: '#/components/schemas/StatementDate'
      transaction_status:
        $ref: '#/components/schemas/TransactionStatus'
      approval_code:
        $ref: '#/components/schemas/ApprovalCode'
      original_amount:
        $ref: '#/components/schemas/OriginalAmount'
      original_currency:
        $ref: '#/components/schemas/OriginalCurrency'
      total_amount:
        $ref: '#/components/schemas/TotalAmount'
      transaction_amount:
        $ref: '#/components/schemas/TransactionAmount'
      transaction_currency:
        $ref: '#/components/schemas/TransactionCurrency'
      fees:
        $ref: '#/components/schemas/Fees'
      exchange_rate:
        $ref: '#/components/schemas/ExchangeRate'
      exchange_rate_date:
        $ref: '#/components/schemas/ExchangeRateDate'
      description:
        $ref: '#/components/schemas/Description'
      merchant_name:
        $ref: '#/components/schemas/MerchantName'
      merchant_country:
        $ref: '#/components/schemas/MerchantCountry'
      merchant_city:
        $ref: '#/components/schemas/MerchantCity'
      mcc:
        $ref: '#/components/schemas/Mcc'
      mcc_description:
        $ref: '#/components/schemas/MccDescription'
      terminal_id:
        $ref: '#/components/schemas/TerminalId'
      card_acceptor_id:
        $ref: '#/components/schemas/CardAcceptorId'
      acquirer_id:
        $ref: '#/components/schemas/AcquirerId'
      channel:
        $ref: '#/components/schemas/Channel'
      transaction_category:
        $ref: '#/components/schemas/TransactionCategory'
      token_id:
        $ref: '#/components/schemas/ReferenceTokenId'
      cardholder_id:
        $ref: '#/components/schemas/CardholderId'
      card_account_id:
        $ref: '#/components/schemas/ReferenceCardAccountId'
      card_id:
        $ref: '#/components/schemas/ReferenceCardId'
      transaction_reference:
        $ref: '#/components/schemas/TransactionReference'

    ContractReference:
      type: string
      maxLength: 50
      examples:
        swiss:
          value: CH3456789012345678901
        custom:
          value: ABC-56789012345
      description: Functional reference to a customer relationship/contract that is responsible for the card, defined by the Card Service Provider.

    PersonReference:
      type: string
      maxLength: 50
      example: 123456789
      description: Functional reference to a cardholder, defined by the Card Service Provider.
    
    CardId:
      type: string
      maxLength: 50
      example: 4321A1B2C3DE1234
      description: Technical reference to a card (unique, constant in the lifecycle of a card even in case of replacements or renewals)

    EmbossingLine1:
      type: string
      maxLength: 35
      example: Peter Schweizer
      description: First line embossed on the card to indicate the cardholder.

    EmbossingLine2:
      type: string
      maxLength: 35
      example: Peter Schweizer
      description: Second line embossed on the card to indicate the cardholder.

    Pan4Digits:
      type: string
      maxLength: 4  # TODO use pattern: '\d{4}' or number?
      example: 4321
      description: Last 4 digits of the PAN; values can change for the same cardId during the lifecycle.

    ExpiryDate:
      $ref: '#/components/schemas/Date'
      description: Last day when the card is valid and can be used for payments.

    InitialIssuingDate:
      $ref: '#/components/schemas/Date'
      description: Date when card was issued initially.

    CardStatus:
      type: string
      enum:  # TODO list all allowed values in enum
        - ACTIVE
        - SUSPENDED
        - BLOCKED
      example: ACTIVE
      description: |
        Effective status of the card to indicate whether it can be used for payments; definition of enums:
        - active: authorizations are possible
        - suspended: authorizations are temporarily not possible
        - blocked: authorizations are permanently not possible because the card was cancelled or permanently blocked for other reasons

    Currency:
      type: string
      pattern: '^[a-zA-Z0-9]{3}$'
      examples:
        swiss:
          value: CHF
        eu:
          value: EUR
      description: Settlement currency of the card / card account in ISO code format.

    Image:
      type: string
      format: uri  # TODO! specify custom openAPI format or use pattern according to RFC3986
      example: https://one-digitalservice.ch/public/Viseca/media/one-app-images/card-visuals/4_go_m_11_2017.png
      description: URL reference to an image for the design of the card.

    ProductId:
      type: string
      maxLength: 50
      example: 1234567
      description: Identifier for the card product.

    ProductName:
      type: string
      maxLength: 100
      examples:
        basic:
          value: A1
        gold:
          value: MC/VI Gold CHF
      description: Name for the card product assigned by the issuer.

    Scheme:
      type: string
      enum:
        - mastercard
        - visa
        - americanexpress
      example: mastercard
      description: Card network which is used to process payments with the card.

    Category:
      type: string
      enum:  # TODO list all allowed values in enum
        - primary_card
        - additional_card
      example: primary_card
      description: Identifies the nature of the card in regards to the overall account; for some issuers the cardCategory has an influence on the effect of certain lifecycle use cases.

    IssuingType:
      type: string
      enum:  # TODO enum value and description do not match
        - physical
        - virtual
      example: physical
      description: |
        Specifies in which form the card is issued; definition of enums: 
        - plastic: the card is being embossed on a physical material and delivered to the cardholder by mail
        - virtual: the card is being issued only virtually for digital usage

    ProductType:
      type: string
      enum:
        - credit
        - debit
        - prepaid
      example: credit
      description: Type of the card product.

    ProductLine:
      type: string
      enum:
        - consumer
        - business
        - corporate
      example: consumer
      description: Customer segment to which the card is offered.

    CardLimitCycle:
      type: integer
      format: int32
      example: 2000
      description: Total amount of authorizations possible for the card per settlement cycle / month in the currency of the card; effective limit is provided that considers limits on the card and relationship; does not indicate the actually available amount for authorizations in the current cycle.

    CardLimitDaily:
      type: integer
      format: int32
      example: 2000
      description: Total amount of authorizations possible for the card per day in the currency of the card; effective limit is provided that considers limits on the card and relationship; does not indicate the actually available amount for authorizations on the current day.

    CardAccountId:
      type: string
      maxLength: 50
      example: AB-4567890123456
      description: Technical reference to the card account which is used to settle the transactions of the card; can be empty for debit cards which are settled directly to the bank account.

    BankAccountReference:
      type: string
      maxLength: 34
      pattern:  # TODO can we use a pattern for iban or similar?
      example: CH3456789012345678901
      description: Functional reference to the bank account linked to a card; mainly relevant for debit cards, can be empty for credit or prepaid cards.

    IssuerId:
      type: string
      maxLength: 50
      example: 123456789
      description: Identifier for the legal issuer of a card; responsible towards the schemes for keeping the rules.

    IssuerName:
      type: string
      maxLength: 100
      examples:
        viseca:
          value: Viseca Card Services
        ubs:
          value: UBS
        zkb:
          value: Zürcher Kantonalbank
      description: Name of the legal issuer of a card.

    DistributionPartnerId:
      type: string
      maxLength: 50
      example: 123456789
      description: Identifier for the organization which is distributing / selling cards to end customers and who can define the services and branding of the card; empty if the card is distributed by the issuer.

    DistributionPartnerName:
      type: string
      maxLength: 100
      example: Zürcher Kantonalbank
      description: Name of the organization which is distributing / issuing cards to end customers and who can define the services and branding of the card; empty if the card is distributed by the issuer.

    Language:
      type: string
      enum:
        - DE
        - EN
        - FR
        - IT
      example: DE
      description: Preferred language of the cardholder for any communication.

    TokenId:
      type: string
      format: uuid  # TODO special format of id possible?
      maxLength: 50
      example: eb404f8d-656b-4e51-8872-88c42fa55536
      description: Unique identifier for the token of a card, defined by the Card Service Provider.

    TokenPan4Digits:
      type: string
      maxLength: 4
      example: 4321
      description: Last 4 digits of the PAN for the token, usually shown in wallets or on receipts when the token is used for payments.

    WalletId:
      type: string
      maxLength: 10
      example: 123
      description: Identifier for the wallet in which the token is used and managed.

    WalletName:
      type: string
      enum:
        - APPLE_PAY
        - SAMSUNG_PAY
        - GOOGLE_PAY
        - GARMIN_PAY
      example: APPLE_PAY
      description: Name of the wallet in which the token is used and managed.

    TokenRequestorId:
      type: string
      maxLength: 11
      example: 1111111111  # TODO 11 digits?
      description: Identifier for the token requestor / token service provider.

    TokenRequestorName:
      type: string
      maxLength: 100
      example: Zalando
      description: Name of the token requestor / token service provider.

    DeviceName:
      type: string
      maxLength: 100
      example: Peter's iPhone
      description: Name of the device which is associated to the token, only available for device-based tokens.

    DeviceType:
      type: string
      maxLength: 100
      example: IPHONE
      description: Type of the device which is associated to the token, only available for device-based tokens; value defined by  the Card Service Provider.

    FundingCardId:
      type: string
      maxLength: 50
      example: 4321A1B2C3DE1234  # TODO use unique values if not indicating same parameters to avoid confusions?
      description: Reference to the card that is used to fund the transactions of the token.

    TokenStatus:
      type: string
      enum:  # TODO list all allowed values in enum
        - ACTIVE
        - SUSPENDED
        - BLOCKED
        - PENDING
      example: ACTIVE
      description: |
        Effective status of the token to indicate whether it can be used for payments; definition of enums:
        - active: authorizations are possible
        - suspended: authorizations are temporarily not possible
        - blocked: authorizations are permanently not possible because the token was cancelled
        - pending: authorizations are not possible because the token is not fully issued or currently in transition between status

    TokenIssuingDate:
      $ref: '#/components/schemas/Date'
      description: Date when the token was issued.

    TokenScheme:
      type: string
      enum:
        - mastercard
        - visa
        - americanexpress
      example: mastercard
      description: Scheme for which the token is issued.

    TransactionId:
      type: string
      format: uuid
      maxLength: 50
      example: 9e19df54-47cb-494b-84dc-1c126e95a05c
      description: Unique identifier for booked transactions; Id does not overlap with authorizationId; at least one of authorizationId or transactionId is always present.

    AuthorizationId:
      type: string
      maxLength: 50
      example: 9e19df54-47cb-494b-84dc-1c126e95a05c
      description: Unique identifier for authorized transactions; Id does not overlap with transactionId; at least one of authorizationId or transactionId is always present.

    TransactionDateTime:
      $ref: '#/components/schemas/DateTime'
      description: Date and time when transaction was authorized, always in CH timezone.

    ValutaDate:
      $ref: '#/components/schemas/Date'
      description: Date when the transaction becomes effective on the card account for calculating interest.

    StatementDate:
      $ref: '#/components/schemas/Date'
      description: Date when the statement is created through which the issuer settles the transaction with the cardholder; only available for credit cards.

    TransactionStatus:
      type: string
      enum:
        - authorized
        - booked
      example: authorized
      description: |
      Status of the transaction; definition of enums:
      - authorized: transaction was approved from the issuer to the merchant, but not yet cleared; includes reservations
      - booked: transaction was cleared/settled and charged to the card account

    ApprovalCode:
      type: string
      maxLength: 6
      example: 803051  # TODO always numbers?
      description: Identifies a transaction from the entity that authorized it; in combination with cardId and transactionDateTime usually unique (except for reversals or other special situations).

    OriginalAmount:
      type: number
      example: 2000.05  # TODO use string and pattern? format: float?
      description: Amount of the transaction in the currency used by the merchant.

    OriginalCurrency:
      type: string
      pattern: '^[a-zA-Z0-9]{3}$'
      example: CHF
      description: Currency of the card account on which the transaction is charged.

    TotalAmount:
      type: number
      example: 1957.50  # TODO use string and pattern? format: float?
      description: Total amount including fees for the transaction that is charged by the issuer to the card account (sum of transactionAmount and fees); positive amounts are debit transactions, negative amounts are credit transactions.

    TransactionAmount:
      type: number
      example: 1952.50
      description: Amount of the transaction (excluding fees) in the currency used by the issuer to settle the charge to the card account.

    TransactionCurrency:
      type: string
      pattern: '^[a-zA-Z0-9]{3}$'
      example: CHF
      description: Currency of the card account on which the transaction is charged.

    Fees:
      title:  # TODO optional
      description:  #TODO
      type: object
      required:
        -  # TODO Required in object?
      properties:
        fee_name:
          $ref: '#/components/schemas/FeeName'
        fee_percentage:
          $ref: '#/components/schemas/FeePercentage'
        fee_amount:
          $ref: '#/components/schemas/FeeAmount'
        fee_currency:
          $ref: '#/components/schemas/FeeCurrency'

    ExchangeRate:
      type: number
      example: 1.0485930
      description: Exchange rate for converting the originalAmount into the transactionAmount.

    ExchangeRateDate:
      $ref: '#/components/schemas/Date'
      description: Date which was used to determine the exchange rate, usually the valutaDate.

    Description:
      type: string
      maxLength: 100
      example: Aufladung
      description: Description of the purpose of the transaction and potentially a reference to the merchant.

    MerchantName:
      type: string
      maxLength: 100
      example: Yallo
      description: Name of the merchant who requested the transaction.

    MerchantCountry:
      type: string
      pattern: '^[a-zA-Z0-9]{3}$'
      example: CHE
      description: Country in which the merchant is located.

    MerchantCity:
      type: string
      maxLength: 50
      example: Zurich
      description: City in which the merchant is located.

    Mcc:
      type: string
      maxLength: 4
      example: 4812  # TODO zip code = numbers only?
      description: Merchant Category Code to identify the industry branch of the merchant.

    MccDescription:
      type: string
      maxLength: 100
      example: Telco
      description: Description for the mcc.

    TerminalId:
      type: string
      maxLength: 8
      example: 12345678
      description: Identifier for the terminal which has read the card data.

    CardAcceptorId:
      type: string
      maxLength: 15
      example: 87040
      description: Identifier for the merchant who requested the transaction.

    AcquirerId:
      type: string
      maxLength: 11
      example: 12345678901  # TODO exactly 11 digits?
      description: Identifies the acquirer who submitted the transaction; not provided by all Card Service Providers.

    Channel:
      type: string
      enum:
        - standard
        - ecommerce
      example: standard
      description: Channel that was used by the cardholder for executing the transaction, allows the identification of eCommerce transactions.

    TransactionCategory:
      type: string
      maxLength: 50
      examples:
        100:
          value: Cash withdrawal
        103: 
          value: ATM operator refund
        117: 
          value: P2P payment charge sender
        118:
          value: P2P payment credit recipient "merchant", "fee", "atm"
      description: Category of the transaction, defined by the Card Service Provider.

    ReferenceTokenId:  # TODO TokenId already in use
      type: string
      maxLength: 50
      example: eb404f8d-656b-4e51-8872-88c42fa55536
      description: Reference to the token that was used for the transaction, only present for token-based transactions.

    CardholderId:
      type: string
      maxLength: 50
      example: Peter Schweizer
      description: Reference to the cardholder who owns the card which was used for the transaction; not provided by all Card Service Providers.

    ReferenceCardAccountId:  # TODO CardAccountId already in use
      type: string
      maxLength: 50
      example: AB-4567890123456
      description: Reference to the card account which is used to settle the transaction; not provided by all Card Service Providers.

    ReferenceCardId:  # TODO CardId already in use
      type: string
      maxLength: 50
      example: 4321A1B2C3DE1234
      description: Reference to the card that was used for the transaction.

    TransactionReference:
      type: string
      maxLength: 50
      example: 9e19df54-47cb-494b-84dc-1c126e95a05c
      description: Reference to another transaction or authorization that is linked to the current one, e.g. for separately charged fees, chargeback credits.

    FeeName:
      type: string
      maxLength: 50
      examples:
        tip:
          value: transactionTipAmount
        surcharge:
          value: transactionSurchargeAmount
      description: Name of the fee that is charged for the transaction; value is defined by the Issuer.

    FeePercentage:
      type: number
      example: 3.5%  # TODO type example mismatch
      description: Percentage value of the transactionAmount for the fee type; not provided by all Card Service Providers.

    FeeAmount:
      type: number
      example: 5.00
      description: Amount of the fee that is charged for the transaction; not provided by all Card Service Providers.

    FeeCurrency:
      type: string
      pattern: '^[a-zA-Z0-9]{3}$'
      example: CHF
      description: Currency that is used for charging the fee, usually the same as the currency of the card account.

    Date:
      type: string
      format: date
      example: 2018-04-13

    DateTime:
      type: string
      format: date-time
      example: 2018-04-13T11:11:11Z

    CommonErrorResponse:
      title: Common Error Response
      type: object
      properties:
        type:
          $ref: '#/components/schemas/CommonErrorType'
        title:
          type: string
          example: This is the general problem description
        detail:
          type: string
          example: Detailed problem description with respect to the current request
        instance:
          type: string
          example: path/to/corresponding/resource

    CommonErrorType:
      title: Common Error Type
      description: Error Types for CommonErrorResponse.
      type: string
      enum:
        - /problems/INVALID_PAYLOAD
        - /problems/MALFORMED_PAYLOAD
        - /problems/INVALID_TOKEN
        - /problems/EXPIRED_TOKEN
        - /problems/INSUFFICIENT_PRIVILEGES
        - /problems/NO_ACCESS_TO_RESOURCE
        - /problems/RESOURCE_DOES_NOT_EXIST
        - /problems/RESOURCE_NOT_READY
        - /problems/RESOURCE_TOO_LARGE
        - /problems/WRONG_METHOD
        - /problems/OPERATION_NOT_ALLOWED
        - /problems/TECHNICAL_ERROR
        - /problems/NOT_IMPLEMENTED
        - /problems/SERVICE_UNAVAILABLE
      example: /problems/TECHNICAL_ERROR

  parameters:

  securitySchemes:
    - ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
    - OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/oauth/token
          scopes:
            read: Grants read access
            write: Grants write access
  
  responses:
    # TODO adjust description due to actual use in API, descriptions are generic from RFC
    standard400:
      headers:
        Content-Type:
          $ref: '#/components/headers/Content-Type'
        Content-Language:
          $ref: '#/components/headers/Content-Language'
      description: |
        Bad Request - The 400 (Bad Request) status code indicates that the server cannot or
        will not process the request due to something that is perceived to be
        a client error (e.g., malformed request syntax, invalid request
        message framing, or deceptive request routing).
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/CommonErrorResponse'

    standard401:
      headers:
        Content-Type:
          $ref: '#/components/headers/Content-Type'
        Content-Language:
          $ref: '#/components/headers/Content-Language'
      description: |
        Unauthorized - The request has not been applied because it provides no valid authentication credentials for the target resource.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/CommonErrorResponse'

    standard403:
      headers:
        Content-Type:
          $ref: '#/components/headers/Content-Type'
        Content-Language:
          $ref: '#/components/headers/Content-Language'
      description: |
        Forbidden - The 403 (Forbidden) status code indicates that the server understood
        the request but refuses to authorize it. A server that wishes to
        make public why the request has been forbidden can describe that
        reason in the response payload (if any).
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/CommonErrorResponse'

    standard404:
      headers:
        Content-Type:
          $ref: '#/components/headers/Content-Type'
        Content-Language:
          $ref: '#/components/headers/Content-Language'
      description: |
        Not Found - The 404 (Not Found) status code indicates that the origin server did
        not find a current representation for the target resource or is not
        willing to disclose that one exists. A 404 status code does not
        indicate whether this lack of representation is temporary or
        permanent; the 410 (Gone) status code is preferred over 404 if the
        origin server knows, presumably through some configurable means, that
        the condition is likely to be permanent.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/CommonErrorResponse'

    standard405:
      headers:
        Content-Type:
          $ref: '#/components/headers/Content-Type'
        Content-Language:
          $ref: '#/components/headers/Content-Language'
      description: |
        Method Not Allowed - The 405 (Method Not Allowed) status code indicates that the method
        received in the request-line is known by the origin server but not
        supported by the target resource. The origin server MUST generate an
        Allow header field in a 405 response containing a list of the target
        resource's currently supported methods.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/CommonErrorResponse'

    standard500:
      headers:
        Content-Type:
          $ref: '#/components/headers/Content-Type'
        Content-Language:
          $ref: '#/components/headers/Content-Language'
      description: |
        Internal Server Error - The 500 (Internal Server Error) status code indicates that the server encountered an unexpected condition that prevented it from fulfilling
        the request.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/CommonErrorResponse'

    standard501:
      headers:
        Content-Type:
          $ref: '#/components/headers/Content-Type'
        Content-Language:
          $ref: '#/components/headers/Content-Language'
      description: |
        Not Implemented - The 501 (Not Implemented) status code indicates that the server does
        not support the functionality required to fulfill the request. This
        is the appropriate response when the server does not recognize the
        request method and is not capable of supporting it for any resource.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/CommonErrorResponse'

    standard503:
      headers:
        Content-Type:
          $ref: '#/components/headers/Content-Type'
        Content-Language:
          $ref: '#/components/headers/Content-Language'
      description: |
        Service Unavailable - The 503 (Service Unavailable) status code indicates that the server is currently unable to handle the request due to a temporary overload
        or scheduled maintenance, which will likely be alleviated after some
        delay. The server MAY send a Retry-After header field
        (Section 7.1.3) to suggest an appropriate amount of time for the
        client to wait before retrying the request.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/CommonErrorResponse'

  headers:
    Content-Language:
      description:  #TODO
      schema:
        type: string
        example: en

    Content-Type:
      description:  # TODO
      schema:
        type: string
        example: application/problem+json; charset=utf-8 according to RFC7807
