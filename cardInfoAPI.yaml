openapi: 3.1.0
info:
  version: 0.7.0
  title: Common Card API (Public)
  description: >
    This specification defines a common card API for payment cards used in Switzerland.
    The API is supposed to be used by third parties to retrieve payment card information for scheme-based debit, credit or prepaid cards (read only).
  # TODO update description - TO BE REVIEWED
  contact:
    email: info@common-api.ch
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://card.common-api.ch
externalDocs:
  description: Find out more about SFTI API specifications
  url: https://www.common-api.ch

# TODO make more detailed description - TO BE REVIEWED
tags:
  - name: Cards
    description: Operations for retrieving information about payment cards.
  - name: Card-tokens
    description: Operations for retrieving information about tokens associated with payment cards.
  - name: Transactions
    description: Operations for retrieving information about transactions and authorizations done with payment cards or tokens.

security:
  - ApiKeyAuth: []
  - OAuth2:
      - read
      - write

paths:
  /cards:
    get:
      summary: Provides a list of cards which match the provided query parameters.  # TODO - TO BE REVIEWED
      description: |
        This operation enables the retrieval of a list of payment cards. Payment cards can be physical or virtual cards.
        In order to prevent API consumers from having to fulfill PCI DSS requirements, no full PAN or other data relevant for this regulation are included.
        The API consumer is expected to have a non-card related identifier for the customer for whom data should be returned (e.g. card account number, bank account number). # TODO - TO BE REVIEWED
      tags:
        - Cards
      parameters:
        - in: query
          name: contract_reference
          required: false
          schema:
            $ref: '#/components/schemas/ContractReference'
        - in: query
          name: person_reference
          required: false
          schema:
            $ref: '#/components/schemas/PersonReference'
        - in: query
          name: card_status
          required: false
          schema:
            $ref: '#/components/schemas/CardStatus'
        - in: query
          name: card_account_id
          required: false
          schema:
            $ref: '#/components/schemas/CardAccountId'
        - in: query
          name: bank_account_reference
          required: false
          schema:
            $ref: '#/components/schemas/BankAccountReference'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: Payment cards were found which match the query parameters. If no cards matched the parameters or access rights are missing, an empty list is returned.  # TODO - TO BE REVIEWED
          headers:
            # TODO headers?
          content:
            application/json:
              schema:
                type: object
                properties:
                  cardList:
                    type: array
                    items:
                      $ref: '#/components/schemas/CardDetails'
                  _links:
                    $ref: '#/components/schemas/LinksPagination'
        '400':
          $ref: '#/components/responses/standard400'
        '500':
          $ref: '#/components/responses/standard500'

  /cards/{cardId}:
    get:
      summary: Provides a single card which matches the id.  # TODO - TO BE REVIEWED
      description: >
        This operation enables the retrieval of a single payment card when the cardId is already known.
        The cardId must be retrieved with the GET /cards operation before or stored locally at the API consumer.  # TODO - TO BE REVIEWED
      tags:
        - Cards
      parameters:
        - $ref: '#/components/parameters/path_cardId'
      responses:
        '200':
          description: Single payment card was found. If the cardId was not found, a 400 is returned.  # TODO - TO BE REVIEWED
          headers:
            # TODO headers?
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDetails'
        '400':
          $ref: '#/components/responses/standard400'
        '500':
          $ref: '#/components/responses/standard500'

  /card-tokens:
    get:
      summary: Provides a list of card tokens which are associated with a card.  # TODO - TO BE REVIEWED
      description: >
        This operation enables the retrieval of a list of tokens associated with a payment card.
        The tokens can be filtered further by status.
        Tokens are representations of a payment card used in specific wallets , wearables or merchants.  # TODO - TO BE REVIEWED
      tags:
        - Card-tokens
      parameters:
        - in: query
          name: card_id
          required: false
          schema:
            $ref: '#/components/schemas/CardId'
        - in: query
          name: token_status
          required: false
          schema:
            $ref: '#/components/schemas/TokenStatus'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: Card tokens were found which match the query parameters. If no card tokens matched the parameters or access rights are missing, an empty list is returned.  # TODO - TO BE REVIEWED
          headers:
            # TODO headers?
          content:
            application/json:
              schema:
                type: object
                properties:
                  cardList:
                    type: array
                    items:
                      $ref: '#/components/schemas/CardTokenDetails'
                  _links:
                    $ref: '#/components/schemas/LinksPagination'
        '400':
          $ref: '#/components/responses/standard400'
        '500':
          $ref: '#/components/responses/standard500'

  /card-tokens/{tokenId}:
    get:
      summary: Provides a single token which matches the cardId and tokenId  # TODO - TO BE REVIEWED
      description: >
        This operation enables the retrieval of a single token when the cardId and tokenId are already known.T
        The identifiers must be retrieved with the GET /cards/{cardId}/card-tokens operation before or stored locally at the API consumer.  # TODO - TO BE REVIEWED
      tags:
        - Card-tokens
      parameters:
        - $ref: '#/components/parameters/path_tokenId'
        - in: query
          name: card_id
          required: false
          schema:
            $ref: '#/components/schemas/CardId'
      responses:
        '200':
          description: Single token was found. If the tokenId was not found, a 400 is returned.  # TODO - TO BE REVIEWED
          headers:
            # TODO headers?
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardTokenDetails'
        '400':
          $ref: '#/components/responses/standard400'
        '500':
          $ref: '#/components/responses/standard500'

  /card-transactions:
    get:
      summary: Provides a list of transactions which match the provided query parameters.  # TODO - TO BE REVIEWED
      description: >
        This operation enables the retrieval of a list of transactions performed with a payment card or token.
        Different query parameters are provided to support an efficient retrieval of individual transactions.
        With the Level 1 of the Common Card API only card-based financial transactions are included.  # TODO - TO BE REVIEWED
      tags:
        - Transactions
      parameters:
        - in: query
          name: authorization_reference
          required: false
          schema:
            $ref: '#/components/schemas/AuthorizationReference'
        - in: query
          name: clearing_reference
          required: false
          schema:
            $ref: '#/components/schemas/ClearingReference'
        - in: query
          name: card_id
          required: false
          schema:
            $ref: '#/components/schemas/CardId'
        - in: query
          name: token_id
          required: false
          schema:
            $ref: '#/components/schemas/TokenId'
        - in: query
          name: from_date
          required: false
          schema:
            $ref: '#/components/schemas/DateTime'
        - in: query
          name: to_date
          required: false
          schema:
            $ref: '#/components/schemas/DateTime'
        - in: query
          name: status
          required: false
          schema:
            $ref: '#/components/schemas/TransactionStatus'
        - in: query
          name: original_currency
          required: false
          schema:
            $ref: '#/components/schemas/OriginalCurrency'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: Transactions were found which match the query parameters. If no transactions matched the parameters or access rights are missing, an empty list is returned.  # TODO - TO BE REVIEWED
          headers:
            # TODO headers?
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionDetails'
        '400':
          $ref: '#/components/responses/standard400'
        '500':
          $ref: '#/components/responses/standard500'

  /card-transactions/{transactionId}:
    get:
      summary: Provides a single transaction which matches the transactionId  # TODO - TO BE REVIEWED
      description: >
        This operation enables the retrieval of a single transaction when the transactionId is already known.
        The transactionId must be retrieved with the GET /card-transactions operation before or stored locally at the API consumer.  # TODO - TO BE REVIEWED
      tags:
        - Transactions
      parameters:
        - $ref: '#/components/parameters/path_transactionId'
      responses:
        '200':
          description: Single token was found. If the transactionId was not found, a 400 is returned.  # TODO - TO BE REVIEWED
          headers:
            # TODO headers?
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDetails'
        '400':
          $ref: '#/components/responses/standard400'
        '500':
          $ref: '#/components/responses/standard500'

components:
  schemas:
    CardDetails:
      title: Card details
      description: Describes a payment card with its relevant characteristics.  # TODO - TO BE REVIEWED
      type: object
      required:
        - contract_reference
        - person_reference
        - card_id
        - embossing_line_1
        - embossing_line_2
        - pan_4_digits
        - expiry_date
        - card_status
        - currency
        - image
        - product_id
        - product_name
        - scheme
        - issuing_type
        - product_type
        - product_line
        - card_limit_cycle
        - card_limit_daily
        - issuer_id
        - issuer_name
        - language
      properties:
        contract_reference:
          $ref: '#/components/schemas/ContractReference'
        person_reference:
          $ref: '#/components/schemas/PersonReference'
        card_id:
          $ref: '#/components/schemas/CardId'
        embossing_line_1:
          $ref: '#/components/schemas/EmbossingLine1'
        embossing_line_2:
          $ref: '#/components/schemas/EmbossingLine2'
        pan_4_digits:
          $ref: '#/components/schemas/Pan4Digits'
        expiry_date:
          $ref: '#/components/schemas/ExpiryDate'
        initial_issuing_date:
          $ref: '#/components/schemas/InitialIssuingDate'
        card_status:
          $ref: '#/components/schemas/CardStatus'
        currency:
          $ref: '#/components/schemas/Currency'
        image:
          $ref: '#/components/schemas/Image'
        product_id:
          $ref: '#/components/schemas/ProductId'
        product_name:
          $ref: '#/components/schemas/ProductName'
        scheme:
          $ref: '#/components/schemas/Scheme'
        category:
          $ref: '#/components/schemas/Category'
        issuing_type:
          $ref: '#/components/schemas/IssuingType'
        product_type:
          $ref: '#/components/schemas/ProductType'
        product_line:
          $ref: '#/components/schemas/ProductLine'
        card_limit_cycle:
          $ref: '#/components/schemas/CardLimitCycle'
        card_limit_daily:
          $ref: '#/components/schemas/CardLimitDaily'
        card_account_id:
          $ref: '#/components/schemas/CardAccountId'
        bank_account_reference:
          $ref: '#/components/schemas/BankAccountReference'
        issuer_id:
          $ref: '#/components/schemas/IssuerId'
        issuer_name:
          $ref: '#/components/schemas/IssuerName'
        distribution_partner_id:
          $ref: '#/components/schemas/DistributionPartnerId'
        distribution_partner_name:
          $ref: '#/components/schemas/DistributionPartnerName'
        language:
          $ref: '#/components/schemas/Language'

    CardTokenDetails:
      title: Card token details
      description: Describes a token with its relevant characteristics.   # TODO - TO BE REVIEWED
      type: object
      required:
        - token_id
        - token_pan_4_digits
        - token_requestor_id
        - token_requestor_name
        - funding_card_id
        - token_status
        - token_issuing_date
        - token_scheme
      properties:
        token_id:
          $ref: '#/components/schemas/TokenId'
        token_pan_4_digits:
          $ref: '#/components/schemas/TokenPan4Digits'
        wallet_id:
          $ref: '#/components/schemas/WalletId'
        wallet_name:
          $ref: '#/components/schemas/WalletName'
        token_requestor_id:
          $ref: '#/components/schemas/TokenRequestorId'
        token_requestor_name:
          $ref: '#/components/schemas/TokenRequestorName'
        device_name:
          $ref: '#/components/schemas/DeviceName'
        device_type:
          $ref: '#/components/schemas/DeviceType'
        funding_card_id:
          $ref: '#/components/schemas/FundingCardId'
        token_status:
          $ref: '#/components/schemas/TokenStatus'
        token_issuing_date:
          $ref: '#/components/schemas/TokenIssuingDate'
        token_scheme:
          $ref: '#/components/schemas/TokenScheme'

    TransactionDetails:
      title: Transaction details
      description: Describes a transaction with its relevant characteristics.  # TODO - TO BE REVIEWED
      type: object
      required:
        - transaction_id
        - transaction_date_time
        - valuta_date
        - transaction_status
        - original_amount
        - original_currency
        - mcc
        - mcc_description
        - transaction_category
        - card_id
      properties:
        transaction_id:
          $ref: '#/components/schemas/TransactionId'
        authorization_reference:
          $ref: '#/components/schemas/AuthorizationReference'
        clearing_reference:
          $ref: '#/components/schemas/ClearingReference'
        transaction_date_time:
          $ref: '#/components/schemas/TransactionDateTime'
        valuta_date:
          $ref: '#/components/schemas/ValutaDate'
        statement_date:
          $ref: '#/components/schemas/StatementDate'
        transaction_status:
          $ref: '#/components/schemas/TransactionStatus'
        approval_code:
          $ref: '#/components/schemas/ApprovalCode'
        original_amount:
          $ref: '#/components/schemas/OriginalAmount'
        original_currency:
          $ref: '#/components/schemas/OriginalCurrency'
        total_amount:
          $ref: '#/components/schemas/TotalAmount'
        transaction_amount:
          $ref: '#/components/schemas/TransactionAmount'
        transaction_currency:
          $ref: '#/components/schemas/TransactionCurrency'
        fees:
          $ref: '#/components/schemas/Fees'
        exchange_rate:
          $ref: '#/components/schemas/ExchangeRate'
        exchange_rate_date:
          $ref: '#/components/schemas/ExchangeRateDate'
        description:
          $ref: '#/components/schemas/Description'
        merchant_name:
          $ref: '#/components/schemas/MerchantName'
        merchant_country:
          $ref: '#/components/schemas/MerchantCountry'
        merchant_city:
          $ref: '#/components/schemas/MerchantCity'
        mcc:
          $ref: '#/components/schemas/Mcc'
        mcc_description:
          $ref: '#/components/schemas/MccDescription'
        terminal_id:
          $ref: '#/components/schemas/TerminalId'
        card_acceptor_id:
          $ref: '#/components/schemas/CardAcceptorId'
        acquirer_id:
          $ref: '#/components/schemas/AcquirerId'
        channel:
          $ref: '#/components/schemas/Channel'
        transaction_category:
          $ref: '#/components/schemas/TransactionCategory'
        token_id:
          $ref: '#/components/schemas/TokenId'
        cardholder_id:
          $ref: '#/components/schemas/CardholderId'
        card_account_id:
          $ref: '#/components/schemas/CardAccountId'
        card_id:
          $ref: '#/components/schemas/CardId'
        transaction_reference:
          $ref: '#/components/schemas/TransactionReference'

    ContractReference:
      title: Contract reference
      type: string
      maxLength: 50
      examples:
        - CH3456789012345678901
        - ABC-56789012345
      description: Functional reference to a customer relationship/contract that is responsible for the card, defined by the Card Service Provider.

    PersonReference:
      title: Person reference
      type: string
      maxLength: 50
      examples:
        - '123456789'
      description: Functional reference to a cardholder, defined by the Card Service Provider.

    CardId:
      title: Card id
      type: string
      maxLength: 50
      examples:
        - 4321A1B2C3DE1234
      description: Technical reference to a card (unique, constant in the lifecycle of a card even in case of replacements or renewals).

    EmbossingLine1:
      title: Embossing line 1
      type: string
      maxLength: 35
      examples:
        - Peter Schweizer
      description: First line embossed on the card to indicate the cardholder.

    EmbossingLine2:
      title: Embossing line 2
      type: string
      maxLength: 35
      examples:
        - Peter Schweizer
      description: Second line embossed on the card to indicate the cardholder.

    Pan4Digits:
      title: Pan 4 digits
      type: string
      maxLength: 4
      pattern: '^\d{4}$'
      examples:
        - '4321'
      description: Last 4 digits of the PAN; values can change for the same cardId during the lifecycle.

    ExpiryDate:
      title: Expiry date
      $ref: '#/components/schemas/Date'
      description: Last day when the card is valid and can be used for payments.

    InitialIssuingDate:
      title: Initial issuing date
      $ref: '#/components/schemas/Date'
      description: Date when card was issued initially.

    CardStatus:
      title: Card status
      type: string
      enum:
        - ACTIVE
        - SUSPENDED
        - BLOCKED
      examples:
        - ACTIVE
      description: |
        Effective status of the card to indicate whether it can be used for payments; definition of enums:
        - active: authorizations are possible
        - suspended: authorizations are temporarily not possible
        - blocked: authorizations are permanently not possible because the card was cancelled or permanently blocked for other reasons

    Currency:
      type: string
      pattern: '^[a-zA-Z0-9]{3}$'
      examples:
        - CHF
        - EUR
      description: Settlement currency of the card / card account in ISO code format.

    Image:
      type: string
      format: uri
      examples:
        - https://one-digitalservice.ch/public/Viseca/media/one-app-images/card-visuals/4_go_m_11_2017.png
      description: URL reference to an image for the design of the card.

    ProductId:
      title: Product id
      type: string
      maxLength: 50
      examples:
        - '1234567'
      description: Identifier for the card product.

    ProductName:
      title: Product name
      type: string
      maxLength: 100
      examples:
        - A1
        - MC/VI Gold CHF
      description: Name for the card product assigned by the issuer.

    Scheme:
      type: string
      enum:
        - mastercard
        - visa
        - americanexpress
        - dinersclub
      examples:
        - mastercard
      description: Card network which is used to process payments with the card in switzerland.

    Category:
      type: string
      enum:
        - primary_card
        - additional_card
      examples:
        - primary_card
      description: Identifies the nature of the card in regards to the overall account; for some issuers the cardCategory has an influence on the effect of certain lifecycle use cases.

    IssuingType:
      title: Issuing type
      type: string
      enum:
        - physical
        - virtual
      examples:
        - physical
      description: >
        Specifies in which form the card is issued; definition of enums:
        - physical: the card is being embossed on a physical material and delivered to the cardholder by mail
        - virtual: the card is being issued only virtually for digital usage

    ProductType:
      title: Product type
      type: string
      enum:
        - credit
        - debit
        - prepaid
      examples:
        - credit
      description: Type of the card product.

    ProductLine:
      title: Product line
      type: string
      enum:
        - consumer
        - business
        - corporate
      examples:
        - consumer
      description: Customer segment to which the card is offered.

    CardLimitCycle:
      title: Card limit cycle
      type: integer
      format: int32
      examples:
        - 2000
      description: Total amount of authorizations possible for the card per settlement cycle / month in the currency of the card; effective limit is provided that considers limits on the card and relationship; does not indicate the actually available amount for authorizations in the current cycle.

    CardLimitDaily:
      title: Card limit daily
      type: integer
      format: int32
      examples:
        - 2000
      description: Total amount of authorizations possible for the card per day in the currency of the card; effective limit is provided that considers limits on the card and relationship; does not indicate the actually available amount for authorizations on the current day.

    CardAccountId:
      title: Card account id
      type: string
      maxLength: 50
      examples:
        - AB-4567890123456
      description: Technical reference to the card account which is used to settle the transactions of the card; can be empty for debit cards which are settled directly to the bank account.

    BankAccountReference:
      title: Bank account reference
      type: string
      maxLength: 34
      examples:
        - CH3456789012345678901
      description: Functional reference to the bank account linked to a card; mainly relevant for debit cards, can be empty for credit or prepaid cards.

    IssuerId:
      title: Issuer id
      type: string
      maxLength: 50
      examples:
        - '123456789'
      description: Identifier for the legal issuer of a card; responsible towards the schemes for keeping the rules.

    IssuerName:
      title: Issuer name
      type: string
      maxLength: 100
      examples:
        - Viseca Card Services
        - UBS
        - Zürcher Kantonalbank
      description: Name of the legal issuer of a card.

    DistributionPartnerId:
      title: Distribution partner id
      type: string
      maxLength: 50
      examples:
        - '123456789'
      description: Identifier for the organization which is distributing / selling cards to end customers and who can define the services and branding of the card; empty if the card is distributed by the issuer.

    DistributionPartnerName:
      title: Distribution partner name
      type: string
      maxLength: 100
      examples:
        - Zürcher Kantonalbank
      description: Name of the organization which is distributing / issuing cards to end customers and who can define the services and branding of the card; empty if the card is distributed by the issuer.

    Language:
      type: string
      enum:
        - DE
        - EN
        - FR
        - IT
      examples:
        - DE
      description: Preferred language of the cardholder for any communication.

    TokenId:
      title: Token id
      type: string
      format: uuid  # TODO special format of id possible?
      maxLength: 50
      examples:
        - eb404f8d-656b-4e51-8872-88c42fa55536
      description: Unique identifier for the token of a card, defined by the Card Service Provider.

    TokenPan4Digits:
      title: Token pan 4 digits
      type: string
      maxLength: 4
      examples:
        - '4321'
      description: Last 4 digits of the PAN for the token, usually shown in wallets or on receipts when the token is used for payments.

    WalletId:
      title: Wallet id
      type: string
      maxLength: 10
      examples:
        - '123'
      description: Identifier for the wallet in which the token is used and managed.

    WalletName:
      title: Wallet name
      type: string
      enum:
        - APPLE_PAY
        - SAMSUNG_PAY
        - GOOGLE_PAY
        - GARMIN_PAY
      examples:
        - APPLE_PAY
      description: Name of the wallet in which the token is used and managed.

    TokenRequestorId:
      title: Token requestor id
      type: string
      maxLength: 11
      examples:
        - '11111111111'
      description: Identifier for the token requestor / token service provider.

    TokenRequestorName:
      title: Token requestor name
      type: string
      maxLength: 100
      examples:
        - Zalando
      description: Name of the token requestor / token service provider.

    DeviceName:
      title: Device name
      type: string
      maxLength: 100
      examples:
        - Peter's iPhone
      description: Name of the device which is associated to the token, only available for device-based tokens.

    DeviceType:
      title: Device type
      type: string
      maxLength: 100
      examples:
        - IPHONE
      description: Type of the device which is associated to the token, only available for device-based tokens; value defined by  the Card Service Provider.

    FundingCardId:
      title: Funding card id
      type: string
      maxLength: 50
      examples:
        - 4321A1B2C3DE1234
      description: Reference to the card that is used to fund the transactions of the token.

    TokenStatus:
      title: Token status
      type: string
      enum:
        - ACTIVE
        - SUSPENDED
        - BLOCKED
        - PENDING
      examples:
        - ACTIVE
      description: |
        Effective status of the token to indicate whether it can be used for payments; definition of enums:
        - active: authorizations are possible
        - suspended: authorizations are temporarily not possible
        - blocked: authorizations are permanently not possible because the token was cancelled
        - pending: authorizations are not possible because the token is not fully issued or currently in transition between status

    TokenIssuingDate:
      title: Token issuing date
      $ref: '#/components/schemas/Date'
      description: Date when the token was issued.

    TokenScheme:
      title: Token scheme
      type: string
      enum:
        - mastercard
        - visa
        - americanexpress
      examples:
        - mastercard
      description: Scheme for which the token is issued.

    TransactionId:
      title: Transaction id
      type: string
      format: uuid
      maxLength: 50
      examples:
        - 9e19df54-47cb-494b-84dc-1c126e95a05c
      description: UUID to link AuthorizationReference and ClearingReference.  # TODO - proposal Dominik

    AuthorizationReference:
      title: Authorization reference
      type: string
      maxLength: 50
      examples:
        - 9e19df54-47cb-494b-84dc-1c126e95a05c
      description: > 
        Unique identifier for authorized transactions; Id does not overlap with ClearingReference; at least one of AuthorizationReference or ClearingReference is always present.  # TODO remove one-of dependency?

    ClearingReference:
      title: Clearing reference
      type: string
      maxLength: 50
      examples:
        - 9e19df54-47cb-494b-84dc-1c126e95a05c
      description: >
        Unique identifier for booked transactions; Id does not overlap with AuthorizationReference; at least one of AuthorizationReference or ClearingReference is always present.  # TODO remove one-of dependency?

    TransactionDateTime:
      title: Transaction date-time
      $ref: '#/components/schemas/DateTime'
      description: Date and time when transaction was authorized, always in CH timezone.

    ValutaDate:
      title: Valuta date
      $ref: '#/components/schemas/Date'
      description: Date when the transaction becomes effective on the card account for calculating interest.

    StatementDate:
      title: Statement date
      $ref: '#/components/schemas/Date'
      description: Date when the statement is created through which the issuer settles the transaction with the cardholder; only available for credit cards.

    TransactionStatus:
      title: Transaction status
      type: string
      enum:
        - authorized
        - booked
      examples:
        - authorized
      description: >
        Status of the transaction; definition of enums:
        - authorized: transaction was approved from the issuer to the merchant, but not yet cleared; includes reservations
        - booked: transaction was cleared/settled and charged to the card account

    ApprovalCode:
      title: Approval code
      type: string
      pattern: '^\d{6}$'
      examples:
        - '803051'
      description: Identifies a transaction from the entity that authorized it; in combination with cardId and transactionDateTime usually unique (except for reversals or other special situations).

    OriginalAmount:
      title: Original amount
      type: number
      examples:
        - 2000.05
      description: Amount of the transaction in the currency used by the merchant.

    OriginalCurrency:
      title: Original currency
      type: string
      pattern: '^[a-zA-Z0-9]{3}$'
      examples:
        - CHF
      description: Currency of the card account on which the transaction is charged.

    TotalAmount:
      title: Total amount
      type: number
      examples:
        - 1957.50
      description: Total amount including fees for the transaction that is charged by the issuer to the card account (sum of transactionAmount and fees); positive amounts are debit transactions, negative amounts are credit transactions.

    TransactionAmount:
      title: Transaction amount
      type: number
      examples:
        - 1952.50
      description: Amount of the transaction (excluding fees) in the currency used by the issuer to settle the charge to the card account.

    TransactionCurrency:
      title: Transaction currency
      type: string
      pattern: '^[a-zA-Z0-9]{3}$'
      examples:
        - CHF
      description: Currency of the card account on which the transaction is charged.

    Fees:
      title: Fees
      description:  One or more fees related to a transaction. Depending on the card service provider and the type of fee only the fee_percentage or fee_amount is provided.
      type: object
      required:
        -  fee_name
      properties:
        fee_name:
          $ref: '#/components/schemas/FeeName'
        fee_percentage:
          $ref: '#/components/schemas/FeePercentage'
        fee_amount:
          $ref: '#/components/schemas/FeeAmount'
        fee_currency:
          $ref: '#/components/schemas/FeeCurrency'

    ExchangeRate:
      title: Exchange rate
      type: number
      examples:
        - 1.0485930
      description: Exchange rate for converting the originalAmount into the transactionAmount.

    ExchangeRateDate:
      title: Exchange rate date
      $ref: '#/components/schemas/Date'
      description: Date which was used to determine the exchange rate, usually the valutaDate.

    Description:
      type: string
      maxLength: 100
      examples:
        - Aufladung
      description: Description of the purpose of the transaction and potentially a reference to the merchant.

    MerchantName:
      title: Merchant name
      type: string
      maxLength: 100
      examples:
        - Yallo
      description: Name of the merchant who requested the transaction.

    MerchantCountry:
      title: Merchant country
      type: string
      pattern: '^[a-zA-Z0-9]{3}$'
      examples:
        - CHE
      description: Country in which the merchant is located.

    MerchantCity:
      title: Merchant city
      type: string
      maxLength: 50
      examples:
        - Zurich
      description: City in which the merchant is located.

    Mcc:
      type: string
      maxLength: 4
      examples:
        - '4812'
      description: Merchant Category Code to identify the industry branch of the merchant.

    MccDescription:
      title: Mcc description
      type: string
      maxLength: 100
      examples:
        - Telco
      description: Description for the mcc.

    TerminalId:
      title: Terminal id
      type: string
      maxLength: 8
      examples:
        - '12345678'
      description: Identifier for the terminal which has read the card data.

    CardAcceptorId:
      title: Card acceptor id
      type: string
      maxLength: 15
      examples:
        - '87040'
      description: Identifier for the merchant who requested the transaction.

    AcquirerId:
      title: Acquirer id
      type: string
      maxLength: 11
      examples:
        - '12345678901'
      description: Identifies the acquirer who submitted the transaction; not provided by all Card Service Providers.

    Channel:
      type: string
      enum:
        - standard
        - ecommerce
      examples:
        - standard
      description: Channel that was used by the cardholder for executing the transaction, allows the identification of eCommerce transactions.

    TransactionCategory:
      title: Transaction category
      type: string
      maxLength: 50
      examples:
        - '100: Cash withdrawal'
        - '103: ATM operator refund'
        - '117: P2P payment charge sender'
        - '118: P2P payment credit recipient'
        - 'merchant'
        - 'fee'
        - 'atm'
      description: Category of the transaction, defined by the Card Service Provider.

    CardholderId:
      title: Cardholder id
      type: string
      maxLength: 50
      examples:
        - Peter Schweizer
      description: Reference to the cardholder who owns the card which was used for the transaction; not provided by all Card Service Providers.

    TransactionReference:
      title: Transaction reference
      type: string
      maxLength: 50
      examples:
        - 9e19df54-47cb-494b-84dc-1c126e95a05c
      description: Reference to another transaction or authorization that is linked to the current one, e.g. for separately charged fees, chargeback credits.

    FeeName:
      title: Fee name
      type: string
      maxLength: 50
      examples:
        - transactionTipAmount
        - transactionSurchargeAmount
      description: Name of the fee that is charged for the transaction; value is defined by the Issuer.

    FeePercentage:
      title: Fee percentage
      type: number
      examples:
        - 3.5
      description: >
        Percentage value of the transactionAmount for the fee type; not provided by all Card Service Providers. 
        Values are provided to be compatible with the % notation. For example a value 3.5 is to be interpreted as 3.5% (= 0.035 as decimal).   # TODO verify description

    FeeAmount:
      title: Fee amount
      type: number
      examples:
        - 5.00
      description: Amount of the fee that is charged for the transaction; not provided by all Card Service Providers.

    FeeCurrency:
      title: Fee currency
      type: string
      pattern: '^[a-zA-Z0-9]{3}$'
      examples:
        - CHF
      description: Currency that is used for charging the fee, usually the same as the currency of the card account.

    Date:
      type: string
      format: date
      examples:
        - 2018-04-13
      description: General date that is used for different attributes, format is 'YYYY-MM-DD'

    DateTime:
      title: Date-time
      type: string
      format: date-time
      examples:
        - 2018-04-13T11:11:11Z
      description: General date-time that is used for different attributes, format is 'YYYY-MM-DDThh:mm:ss' # TODO - include timezone?

    LinksPagination:
      description: Links (or cursors) returned in the answer of an API call.
      type: object
      properties:
        self:
          type: string
          format: uri
          description: Link / cursor to the current result set (based on the submitted pagination approach).
          examples:
            - /card-app/api/v1/products?offset=75&limit=25
        first:
          type: string
          format: uri
          description: Link / cursor to the first result set (based on the submitted pagination approach).
          examples:
            - /card-app/api/v1/products?offset=0&limit=25
        previous:
          type: string
          format: uri
          description: Link / cursor to the previous result set (based on the submitted pagination approach).
          examples:
            - /card-app/api/v1/products?offset=50&limit=25
        next:
          type: string
          format: uri
          description: Link / cursor to the next result set (based on the submitted pagination approach).
          examples:
            - /card-app/api/v1/products?offset=100&limit=25
        last:
          type: string
          format: uri
          description: Link / cursor to the last result set (based on the submitted pagination approach).
          examples:
            - /card-app/api/v1/products?offset=150&limit=25

    CommonErrorResponse:
      title: Common Error Response
      description: General error response structure used in different response codes.
      type: object
      properties:
        type:
          $ref: '#/components/schemas/CommonErrorType'
        title:
          type: string
          description: Short name for the problem
          examples:
            - This is the general problem description
        detail:
          type: string
          description: More details about the problem
          examples:
            - Detailed problem description with respect to the current request
        instance:
          type: string
          description: Reference to an individual entity or request which caused the problem
          examples:
            - path/to/corresponding/resource

    CommonErrorType:
      title: Common Error Type
      description: Error Types for CommonErrorResponse.
      type: string
      enum:
        - /problems/INVALID_PAYLOAD
        - /problems/MALFORMED_PAYLOAD
        - /problems/INVALID_TOKEN
        - /problems/EXPIRED_TOKEN
        - /problems/INSUFFICIENT_PRIVILEGES
        - /problems/NO_ACCESS_TO_RESOURCE
        - /problems/RESOURCE_DOES_NOT_EXIST
        - /problems/RESOURCE_NOT_READY
        - /problems/RESOURCE_TOO_LARGE
        - /problems/WRONG_METHOD
        - /problems/OPERATION_NOT_ALLOWED
        - /problems/TECHNICAL_ERROR
        - /problems/NOT_IMPLEMENTED
        - /problems/SERVICE_UNAVAILABLE
      examples:
        - /problems/TECHNICAL_ERROR

  parameters:
    path_cardId:
      in: path
      name: cardId
      required: true
      schema:
        $ref: '#/components/schemas/CardId'

    path_tokenId:
      in: path
      name: tokenId
      required: true
      schema:
        $ref: '#/components/schemas/TokenId'

    path_transactionId:
      in: path
      name: transactionId
      required: true
      schema:
        $ref: '#/components/schemas/TransactionId'

    limit:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        examples:
          - 25
      description: Optional parameter for pagination. Maximum number of entries to be returned.

    offset:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        examples:
          - 25
      description: Optional parameter for pagination. The number of items to skip before starting to collect the result set.

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/oauth/token
          scopes:
            read: Grants read access
            write: Grants write access

  responses:
    # TODO adjust description due to actual use in API, descriptions are generic from RFC - TO BE REVIEWED
    standard400:
      headers:
        Content-Type:
          $ref: '#/components/headers/Content-Type'
        Content-Language:
          $ref: '#/components/headers/Content-Language'
      description: |
        Client Error - The request could not be processed due to a problem in the data provided. This could be for any of the reasons of the HTML standard that would result in a 4xx code.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/CommonErrorResponse'

    standard500:
      headers:
        Content-Type:
          $ref: '#/components/headers/Content-Type'
        Content-Language:
          $ref: '#/components/headers/Content-Language'
      description: |
        Internal Server Error - The request could not be processed due to a problem at the data provider. This could be for any of the reasons of the HTML standard that would result in a 5xx code.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/CommonErrorResponse'

  headers:
    Content-Language:
      description:  # TODO
      schema:
        type: string
        examples:
          - en

    Content-Type:
      description:  # TODO
      schema:
        type: string
        examples:
          - application/problem+json; charset=utf-8 according to RFC7807
