openapi: "3.0.3"
info:
  version: "0.51"
  title: Common Card Info API (Public)
  description:
    This specification defines a common card info API for payment cards used in Switzerland. The API is supposed to be used to retrieve payment card infos (read only).
  termsOfService: 'Tbd'
  contact:
    email: info@common-api.ch
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: https://card.common-api.ch
externalDocs:
  description: Find out more about SFTI API specifications
  url: 'https://www.common-api.ch'
security:
  - ApiKeyAuth: []
  - OAuth2:
      - read
      - write

tags:
  - name: cards
    description: Operations related with managing cards
  - name: card-accounts
    description: Operations related with managing card accounts
  - name: statements
    description: Operations related with retrieving card account statements
  - name: transactions
    description: Operations related with retrieving card transactions
  - name: person
    description: Operations related with managing persons
  - name: card-contract
    description: Operations related with managing card contracts
  - name: card-accountbundle
    description: --
  - name: card-consents
    description: '[not used] Operations related with managing card consents'

paths:
  /cards:
    get:
      tags:
        - cards
      description: List of cards for the authenticated context including all related information, optional filtered by personId / cardContractId / cardAccountId, sorted by cardId.
      summary: Return the list of all cards for the authenticated context (filtered and sorted)
      parameters:
        - $ref: '#/components/parameters/transactionId'
        - $ref: '#/components/parameters/cardAccountId'
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/clientid_in_header'
        - $ref: '#/components/parameters/correlation_in_header'
        - $ref: '#/components/parameters/agent_in_header'
      responses:
        '200':
          description: Paginated list of all cards with all related information sorted by cardId
          content:
            application/json:
              schema:
                type: object
                properties:
                  cardList:
                    type: array
                    items:
                      $ref: '#/components/schemas/card'
                  _links:
                    $ref: '#/components/schemas/linksPagination'
          headers:
            X-Correlation-ID:
              schema:
                type: string
              description: Reflects the ID (set by the caller) from the request.
        '400':
          $ref: '#/components/responses/standard400'
        '401':
          $ref: '#/components/responses/standard401'
        '403':
          $ref: '#/components/responses/standard403'
        '404':
          $ref: '#/components/responses/standard404'
        '405':
          $ref: '#/components/responses/standard405'
        '500':
          $ref: '#/components/responses/standard500'
        '501':
          $ref: '#/components/responses/standard501'
        '503':
          $ref: '#/components/responses/standard503'

  /card-accounts:
    get:
      tags:
        - card-accounts
      description: List of card accounts for the authenticated context including all related information, filtered by query, sorted by cardAccountId.
      summary: Return the list of all card accounts for the authenticated context (filtered and sorted)
      parameters:
        - $ref: '#/components/parameters/transactionId'
        - $ref: '#/components/parameters/cardId'
        - $ref: '#/components/parameters/statementId'
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/card-accountbundleId'
        - $ref: '#/components/parameters/cardContractId'
        - in: query
          name: IBAN
          description: International Bank Account Number that is associated with the payment card account. Note, that one IBAN can be associated to multiple card accounts.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/clientid_in_header'
        - $ref: '#/components/parameters/correlation_in_header'
        - $ref: '#/components/parameters/agent_in_header'
      responses:
        '200':
          description: Paginated list of all card accounts with all related information sorted by cardAccountId
          content:
            application/json:
              schema:
                type: object
                properties:
                  cardAccountList:
                    type: array
                    items:
                      $ref: '#/components/schemas/cardAccount'
                  _links:
                    $ref: '#/components/schemas/linksPagination'
          headers:
            X-Correlation-ID:
              schema:
                type: string
              description: Reflects the ID (set by the caller) from the request.
        '400':
          $ref: '#/components/responses/standard400'
        '401':
          $ref: '#/components/responses/standard401'
        '403':
          $ref: '#/components/responses/standard403'
        '404':
          $ref: '#/components/responses/standard404'
        '405':
          $ref: '#/components/responses/standard405'
        '500':
          $ref: '#/components/responses/standard500'
        '501':
          $ref: '#/components/responses/standard501'
        '503':
          $ref: '#/components/responses/standard503'

  /card-accounts/statements:
    get:
      tags:
        - statements
      description: List of card account statements for the authenticated context including all related information, filtered by query, sorted by cardAccountStatementId.
      summary: Return the list of all card account statements for the authenticated context (filtered and sorted)
      parameters:
        - $ref: '#/components/parameters/cardAccountId'
        - in: query
          name: fromDate
          description: Date from which statement entries should be retrieved
          required: false
          schema:
            $ref: '#/components/schemas/date'
        - in: query
          name: untilDate
          description: Date until which statement entries should be retrieved
          required: false
          schema:
            $ref: '#/components/schemas/date'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/clientid_in_header'
        - $ref: '#/components/parameters/correlation_in_header'
        - $ref: '#/components/parameters/agent_in_header'
      responses:
        '200':
          description: Paginated list of all card account statements with all related information sorted by cardAccountStatementId
          content:
            application/json:
              schema:
                type: object
                properties:
                  cardAccountStatementList:
                    type: array
                    items:
                      $ref: '#/components/schemas/cardAccountStatement'
                  _links:
                    $ref: '#/components/schemas/linksPagination'
          headers:
            X-Correlation-ID:
              schema:
                type: string
              description: Reflects the ID (set by the caller) from the request.
        '400':
          $ref: '#/components/responses/standard400'
        '401':
          $ref: '#/components/responses/standard401'
        '403':
          $ref: '#/components/responses/standard403'
        '404':
          $ref: '#/components/responses/standard404'
        '405':
          $ref: '#/components/responses/standard405'
        '500':
          $ref: '#/components/responses/standard500'
        '501':
          $ref: '#/components/responses/standard501'
        '503':
          $ref: '#/components/responses/standard503'

  /card-transactions:
    get:
      tags:
        - transactions
      description: List of card transactions for the authenticated context including all related information, filtered by query, sorted by cardTransactionId.
      summary: Return the list of all card transactions for the authenticated context (filtered and sorted)
      parameters:
        - $ref: '#/components/parameters/cardId'
        - $ref: '#/components/parameters/cardAccountId'
        - in: query
          name: inclName
          description: Only retrieve transactions that include this text in as a merchant name
          required: false
          example: Hotel
          schema:
            type: string
        - name: inclLocation
          in: query
          description: Only retrieve transactions that include this text in as a merchant location
          required: false
          example: London
          schema:
            type: string
        - name: inclCountry
          in: query
          description: Only retrieve transactions that include this text in as a merchant country
          required: false
          example: Italien
          schema:
            type: string
        - name: fromDate
          in: query
          description: Only retrieve transactions starting from this date (YYYY-MM-DD)
          required: false
          schema:
            $ref: '#/components/schemas/date'
        - name: untilDate
          in: query
          description: Only retrieve transactions up until this date (YYYY-MM-DD)
          required: false
          schema:
            $ref: '#/components/schemas/date'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/clientid_in_header'
        - $ref: '#/components/parameters/correlation_in_header'
        - $ref: '#/components/parameters/agent_in_header'
      responses:
        '200':
          description: Paginated list of all card transactions with all related information sorted by cardTransactionId
          content:
            application/json:
              schema:
                type: object
                properties:
                  cardTransactionList:
                    type: array
                    items:
                      $ref: '#/components/schemas/cardTransaction'
                  _links:
                    $ref: '#/components/schemas/linksPagination'
          headers:
            X-Correlation-ID:
              schema:
                type: string
              description: Reflects the ID (set by the caller) from the request.
        '400':
          $ref: '#/components/responses/standard400'
        '401':
          $ref: '#/components/responses/standard401'
        '403':
          $ref: '#/components/responses/standard403'
        '404':
          $ref: '#/components/responses/standard404'
        '405':
          $ref: '#/components/responses/standard405'
        '500':
          $ref: '#/components/responses/standard500'
        '501':
          $ref: '#/components/responses/standard501'
        '503':
          $ref: '#/components/responses/standard503'

  /person:
    get:
      tags:
        - person
      description: List of persons for the authenticated context including all related information, filtered by query which also allows searching, sorted by personId.
      summary: Return the list of all persons for the authenticated context (filtered and sorted)
      parameters:
        - $ref: '#/components/parameters/cardId'
        - $ref: '#/components/parameters/cardAccountId'
        - $ref: '#/components/parameters/cardContractId'
        - in: query
          name: personSurName
          description: First name of the customer.
          required: false
          schema:
            $ref: '#/components/schemas/personSurName'
        - in: query
          name: personName
          description: Last name of the customer.
          required: false
          schema:
            $ref: '#/components/schemas/personName'
        - in: query
          name: companyName
          description: 'Retrieve a list of customers given the company name.'
          required: false
          schema:
            $ref: '#/components/schemas/entityName'
        - in: query
          name: birthDate
          description: Date of birth of the person.
          required: false
          schema:
            $ref: '#/components/schemas/date'
        - in: query
          name: contractType
          description: Possible values are consumer, business, corporate (if left empty, any will be provided)
          required: false
          schema:
            $ref: '#/components/schemas/contractType'
        - in: query
          name: searchType
          description: Possible values are same, soundex, ccv
          required: false
          schema:
            type: string
            enum:
            - same
            - soundex
            - cvv
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/clientid_in_header'
        - $ref: '#/components/parameters/correlation_in_header'
        - $ref: '#/components/parameters/agent_in_header'
      responses:
        '200':
          description: Paginated list of all person with all related information sorted by personId
          content:
            application/json:
              schema:
                type: object
                properties:
                  personList:
                    type: array
                    items:
                      $ref: '#/components/schemas/person'
                  _links:
                    $ref: '#/components/schemas/linksPagination'
          headers:
            X-Correlation-ID:
              schema:
                type: string
              description: Reflects the ID (set by the caller) from the request.
        '400':
          $ref: '#/components/responses/standard400'
        '401':
          $ref: '#/components/responses/standard401'
        '403':
          $ref: '#/components/responses/standard403'
        '404':
          $ref: '#/components/responses/standard404'
        '405':
          $ref: '#/components/responses/standard405'
        '500':
          $ref: '#/components/responses/standard500'
        '501':
          $ref: '#/components/responses/standard501'
        '503':
          $ref: '#/components/responses/standard503'

  /card-contract:
    get:
      tags:
        - card-contract
      description: List of cards contracts for the authenticated context including all related information, filtered by query, sorted by cardContractId.
      summary: Return the list of all card contracts for the authenticated context (filtered and sorted)
      parameters:
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/cardAccountId'
        - $ref: '#/components/parameters/card-accountbundleId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/clientid_in_header'
        - $ref: '#/components/parameters/correlation_in_header'
        - $ref: '#/components/parameters/agent_in_header'
      responses:
        '200':
          description: Paginated list of all queried card contracts with all related information sorted by cardContractsId
          content:
            application/json:
              schema:
                type: object
                properties:
                  cardContractList:
                    type: array
                    items:
                      $ref: '#/components/schemas/cardContract'
                  _links:
                    $ref: '#/components/schemas/linksPagination'
          headers:
            X-Correlation-ID:
              schema:
                type: string
              description: Reflects the ID (set by the caller) from the request.
        '400':
          $ref: '#/components/responses/standard400'
        '401':
          $ref: '#/components/responses/standard401'
        '403':
          $ref: '#/components/responses/standard403'
        '404':
          $ref: '#/components/responses/standard404'
        '405':
          $ref: '#/components/responses/standard405'
        '500':
          $ref: '#/components/responses/standard500'
        '501':
          $ref: '#/components/responses/standard501'
        '503':
          $ref: '#/components/responses/standard503'

  /card-accountbundle:
    get:
      tags:
        - card-accountbundle
      description: --
      summary: --
      parameters:
        - $ref: '#/components/parameters/cardAccountId'
        - $ref: '#/components/parameters/card-accountbundleId'
        - $ref: '#/components/parameters/cardContractId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/clientid_in_header'
        - $ref: '#/components/parameters/correlation_in_header'
        - $ref: '#/components/parameters/agent_in_header'
      responses:
        '200':
          description: --
          content:
            application/json:
              schema:
                type: object
                properties:
                  cardAccountbundleList:
                    type: array
                    items:
                      $ref: '#/components/schemas/cardAccountbundle'
                  _links:
                    $ref: '#/components/schemas/linksPagination'
          headers:
            X-Correlation-ID:
              schema:
                type: string
              description: Reflects the ID (set by the caller) from the request.
        '400':
          $ref: '#/components/responses/standard400'
        '401':
          $ref: '#/components/responses/standard401'
        '403':
          $ref: '#/components/responses/standard403'
        '404':
          $ref: '#/components/responses/standard404'
        '405':
          $ref: '#/components/responses/standard405'
        '500':
          $ref: '#/components/responses/standard500'
        '501':
          $ref: '#/components/responses/standard501'
        '503':
          $ref: '#/components/responses/standard503'


# -------------------------
# -------- Models ---------
# -------------------------
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/oauth/token
          scopes:
            read: Grants read access
            write: Grants write access

  schemas:
    # ---- Card Account Object ----
    cardAccount:
      description: The representation of a card account object
      type: object
      required:
        - cardAccountId
      properties:
        cardAccountId:
          $ref: '#/components/schemas/entityId'
        cards:
          type: array
          description: List of card_uids linked to this account
          items:
            $ref: '#/components/schemas/card'
        currency:
          $ref: '#/components/schemas/currency'
        ibanAccount:
          $ref: '#/components/schemas/paymentQrIbanAccount'
        billingCycle:
          type: string
          description: code that determines the billing cycle
          example: monthly
          enum:
          - weekly
          - monthly
          - quarterly
          - halfyearly
          - yearly
        cardAccountStatus:
          $ref: '#/components/schemas/genericStatus'
        cardLoyality:
          $ref: '#/components/schemas/cardLoyality'
        paymentDetails:
          type: object
          properties:
            paymentType:
                $ref: '#/components/schemas/paymentType'          
            paymentOption:
                $ref: '#/components/schemas/paymentOption'  
        statementDetails:
          type: object
          properties:
            deliveryType:
              type: string
              example: paper
              description: Description of the delivery format of the statement. 
              enum:
              - paper
              - paperless
              - estatement
              - other
            activeDeliveryFee:
              type: number
              example: 1.0
              description: Amount charged to the customer for each statement delivery. Typically, paperless is free.
            nextStatementDate:
              $ref: '#/components/schemas/date'
    # ---------

    # ---- Card Loyality Object ----
    cardLoyality:
      description: The representation of a card loyality object
      type: object
      required:
        - cardLoyalityId
      properties:
        cardLoyalityId:
          $ref: '#/components/schemas/entityId'
        name:
          type: string
          description: Program name
          example: surprize
        reference:
          type: string
          example: "2501021032295"
          description: Additional reference number if available
        enrollment_date:
          $ref: '#/components/schemas/date'
    # ---------

    # ---- Card API Object ----
    cardApi:
      description: List of APIs supported for a API consumer
      type: string
      example: get:cards
    # ---------


    # ---- Card Consent Object ----
    cardConsent:
      description: The representation of a card consent object
      type: object
      required:
        - cardConsentId
        - cardApiList
        - identificationType
        - identificationValue
      properties:
        cardConsentId:
          $ref: '#/components/schemas/entityId'
        identificationType:
          type: string
          example: card_uid
          description: Audit type field in order to identify the actual user who granted the consent. This field contains the type of identifier.
        identificationValue:
          type: string
          example: 404003004CCL50000
          description: Audit type field in order to identify the actual user who granted the consent. This field contains the actual identifier of the type defined before.
        cardApiList:
          type: array
          description: List of the APIs to which access is requested.
          items:
            $ref: '#/components/schemas/cardApi'
    # ---------
    
    # ---- Card Object ----
    card:
      description: The representation of a card objectw
      type: object
      required:
        - cardId
      properties:
        cardId:
          $ref: '#/components/schemas/entityId'
        personId:
          $ref: '#/components/schemas/entityId'
        contractId:
          $ref: '#/components/schemas/entityId'      
        cardAccountId:
          $ref: '#/components/schemas/entityId'     
        issuingPartnerId:
          $ref: '#/components/schemas/entityIdName'        
        issuerId:
          $ref: '#/components/schemas/entityIdName'       
        cardDetail:
          type: object
          required:
            - cardNumberCustomer
          properties:
            cardNumber:
              type: string
              example: 4566549683425654
              maxLength: 19
              description: Card number
            cardNumberCustomer:
              type: string
              example: 4566549683425654
              maxLength: 50
              description: Card number
            initialCreationDate:
              $ref: '#/components/schemas/date'
            expiryDate:
              type: string
              example: 05/19
              description: Card expiry date in the format MM/YY
            embossingLine1:
              type: string
              maxLength: 30
              example: FRANZ MUSTERMANN
              description: Embossing Line 1 contains the person name as visible on the card plastic
            embossingLine2:
              type: string
              maxLength: 30
              example: VISECA CARD SERVICES
              description: Embossing Line 2 may contain a person-specified or product-specific value, as visible on the card plastic
            purgedDate:
              $ref: '#/components/schemas/date'
            currency:
              $ref: '#/components/schemas/currency'
            card_scheme:
              type: string
              example: visa
              description: Card payment scheme
              enum:
              - mastercard
              - visa
              - amex
              - dinersclub
              - other
            productId:
              type: string
              example: "1010101"
              description: Issuer identifier of a card product
            productType:
              type: string
              example: prepaid
              description: States if the card is credit or debit. Prepaid cards are labelled as credit in this operation
              enum:
              - credit
              - debit
              - prepaid
            productCategory:
              type: string
              example: gold
              description: 'Product category corresponds to the tier of card: gold, platinum, basic etc.'
            productLine:
              $ref: '#/components/schemas/contractType'
            productName:
              type: string
              maxLength: 50
              example: World Mastercard Gold CHF
              description: Commercial name of the card product as defined by the bank
            cardImage:
              type: string
              example: "https://bank.ch/images/cardImage.png"
              description: URL to the (png) card image corresponding to the card
            cardRelationship:
              type: string
              example: main_card
              description: 'Identifies the nature of the card in regards to the overall account: main card or additional card'
              enum:
              - main_card
              - additional_card
            previousCardId:
              $ref: '#/components/schemas/entityId'
            previousReplacementDate:
              $ref: '#/components/schemas/date'
            replacementReason:
              type: string
              example: other
              description: Reason for the replacement of this card
            nextCardId:
              $ref: '#/components/schemas/entityId'
            nextReplacementDate:
              $ref: '#/components/schemas/date'
            atmDirectDebit:
              type: boolean
              description: A flag indicating if the ATM Direct Debit functionality is enabled
              example: true
            cardStatus:
              $ref: '#/components/schemas/genericStatus'  
    # ---------

    # ---- Card Account Statement ----
    cardAccountStatement:
      description: xy
      type: object
      required:
        - cardAccountStatementId
      properties:
        cardAccountStatementId:
            $ref: '#/components/schemas/entityId'          
        cardAccountId:
            $ref: '#/components/schemas/entityId'          
        statementCreationDate:
            $ref: '#/components/schemas/date'          
        statementAmount:
            $ref: '#/components/schemas/paymentCurrencyAmount'          
        paymentDueDate:
            $ref: '#/components/schemas/date'          
        statementMinimalDueAmount:
            $ref: '#/components/schemas/paymentCurrencyAmount'          
        paymentType:
            $ref: '#/components/schemas/paymentType'          
        paymentOption:
            $ref: '#/components/schemas/paymentOption'          
    # ---------
    # ---- Card Transaction ----
    cardTransaction:
      description: Transaction object adapted for card use
      type: object
      required:
        - cardTransactionId
      properties:
        cardTransactionId:
          type: string
          format: uuid
          example: d452083f-8316-410d-a609-d49463687329
          description: Uuid v4 of the specific transaction. Must not change when the status (approved, booked, etc.) is changed.
        approvalCode:
          type: string
          example: Please-Provide-Example-and-MaxLength
          description: Additional transaction identifier provided by schemes or processing system
        transactionTimestamp:
          $ref: '#/components/schemas/dateTime'
        originalCurrencyAmount:
          $ref: '#/components/schemas/paymentCurrencyAmount'
        targetCurrencyAmountt:
          $ref: '#/components/schemas/paymentCurrencyAmount'
        exchangeRate:
          type: string
          example: "0.957"
          pattern: "[0-9][.][0-9]{1,10}"
          maxLength: 12
        exchangeRateDate:
          $ref: '#/components/schemas/date'
        merchant:
          type: object
          description: Merchant information of the card transaction
          properties:
            merchantName:
              type: string
              example: COOP PRONTO
              description: Value that contains the merchant name and location
            merchantLocation:
              type: string
              example: Zurich
              # Please maxLength
              description: Value that contains the merchant name and location
            merchantLocationLatitude:
              type: string
              example: "-35.253252"
              # Please regex
              description: Value that contains the merchant name and location
            merchantLocationLongitude:
              type: string
              example: "174.071674"
              # Please regex
              description: Value that contains the merchant name and location
            merchantCountry:
              $ref: '#/components/schemas/country'
            merchangeCategoryCode:
              type: string
              example: "5411"
              description: Value that contains the merchant category code as defined by ISO 18245
        posEntryMode:
          $ref: '#/components/schemas/posEntryMode'
        terminalId:
          type: string
          description: Identifier of the point of sale terminal
          #Please add example and regex
        channel:
          type: string
          description: Showing if it was a eCommerce transaction or not
          enum:
          - ecom
          - other
        offline:
          type: string
          description: Indicator if the transaction was offline authorized
          #Please add example and regex
        statementDate:
          type: string
          format: date
          example: '2018-08-03'
          description: Settlement date
        fees:
          type: array
          description: |-
            This array shows individual fee objects that are associated with the
            transaction. Please note that multiple fee objects can be transmitted.
          items:
             $ref: '#/components/schemas/cardTransactionFee'
        state:
          type: string
          example: authorised
          description: Used to identify if a transactions has been settled (booked) or just authorised
        transactionCategory:
          type: string
          example: merchant
          description: Transaction type identifying merchant to non-merchant entries
          enum:
          - merchant
          - fee
          - atm
        transactionType:
          $ref: '#/components/schemas/cardTransactionType'
        personId:
          $ref: '#/components/schemas/entityId'
        personName:
          type: object
          description: Name of the person
          properties:
            company:
              $ref: '#/components/schemas/entityName'
            name:
              $ref: '#/components/schemas/personName'
            surName:
              $ref: '#/components/schemas/personSurName'
        cardAccountId:
          $ref: '#/components/schemas/entityId'
        cardId:
          $ref: '#/components/schemas/entityId'
        walletProvider:
          type: string
          example: Apple Pay
          description: Identifier of the wallet provider if transaction was perfomred with a payment token (e.g. mobile payment such as Apple Pay)
        token:
          type: string
          example: "1234"
          maxLength: 4
          description: last 4 digits of the token
        tokenRequestorId:
          type: string
          example: "1234"
          maxLength: 4
          description: last 4 digits of the token
          # Is this a duplicate of token?
        securityLevelIndicator:
          type: string
          # Please provide example and regex
          description: Security Level Indicator provides additional information about 3DS, recurring transactions and other authentication related information
        actionCode:
          type: string
          example: "121"
          description: The Action Code provides information about the why a transaction was approved or declined

    # ---------
    # ---- Card Transaction Fee ----
    cardTransactionFee:
      description: Individual fee objects that are associated with the transaction
      type: object
      properties:
        type:
          type: string
          example: Bearbeitungsgebühr 1.75%
          description: Name of the fee
        amount:
          $ref: '#/components/schemas/amount'
        currency:
          $ref: '#/components/schemas/currency'
    # ---------
    # ---- Card Transaction Type ----
    cardTransactionType:
      type: object
      properties:
        acquiringType:
          type: string
          # Please provide example
          description: Provides further insight into the interface used
        financialMeaning:
          type: string
          # Please provide example
          description: Additional functional information about a transaction
        transactionReference:
          type: string
          # Please provide example
          description: Provides information about connecting a transaction to a previous occurred transaction. E.g. Storno
    # -------

    # ---- Card POS Entry Mode ----
    posEntryMode:
      type: object
      description: The POS Entry Mode object contain multiple fields that further define how the transaction was captured at its point of origin including information about authentication, payment infrastructure and other related topics.
      properties:
        cardDataInputCapability:
          type: string
          description: Please_Add_Description_and_Example_and_Regex-MaxLength
        personAuthenticationCapability:
          type: string
          description: Please_Add_Description_and_Example_and_Regex-MaxLength
        cardCaptureCapability:
          type: string
          description: Please_Add_Description_and_Example_and_Regex-MaxLength
        operatingEnvironment:
          type: string
          description: Please_Add_Description_and_Example_and_Regex-MaxLength
        personPresent:
          type: string
          description: Please_Add_Description_and_Example_and_Regex-MaxLength
        cardPresent:
          type: string
          description: Please_Add_Description_and_Example_and_Regex-MaxLength
        cardDataInputMode:
          type: string
          description: Please_Add_Description_and_Example_and_Regex-MaxLength
        personAuthenticationMethod:
          type: string
          description: Please_Add_Description_and_Example_and_Regex-MaxLength
        personAuthenticationEntity:
          type: string
          description: Please_Add_Description_and_Example_and_Regex-MaxLength
        cardDataOutputCapability:
          type: string
          description: Please_Add_Description_and_Example_and_Regex-MaxLength
        terminalOutputCapability:
          type: string
          description: Please_Add_Description_and_Example_and_Regex-MaxLength
        pinCaptureCapability:
          type: string
          description: Please_Add_Description_and_Example_and_Regex-MaxLength

    # ---- Person ----
    person:
      description: Person information .
      type: object
      required:
        - personId
      properties:
        personId:
          $ref: '#/components/schemas/entityId'
        contractId:
          $ref: '#/components/schemas/entityId'        
        personType:
          $ref: '#/components/schemas/contractType'
        isMainPerson:
          type: boolean
          description: Flag to identify if the person is a main person
          example: true
        personStatistics:
          type: object
          properties:
            total_accounts:
              type: integer
              example: 1
              description: Total number of accounts of a private customer or a company
            totalActivAccounts:
              type: integer
              description: Total number of active accounts of a private customer or a company
              example: 2
            totalCards:
              type: integer
              example: 1
              description: Total number of cards of a private customer or a company
            totalActiveCards:
              type: integer
              description: Total number of active cards of a private customer or a company
        personDetail:
          type: object
          properties:
            salutation:
              $ref: '#/components/schemas/personSalutation'
            company:
              $ref: '#/components/schemas/entityName'
            name:
              $ref: '#/components/schemas/personName'
            surName:
              $ref: '#/components/schemas/personSurName'
            middleName:
              $ref: '#/components/schemas/personMiddleName'
            address:
              $ref: '#/components/schemas/structuredAddress'
            country:
              $ref: '#/components/schemas/country'
            language:
              $ref: '#/components/schemas/language'
            nationality:
              $ref: '#/components/schemas/country'
            birthDay:
              $ref: '#/components/schemas/date'
            gender:
              $ref: '#/components/schemas/personGender'
            permit:
              $ref: '#/components/schemas/personPermit'
            externalReferenceId:
              type: string
              maxLength: 30
              example: No1
              description: Reference id of company customers (e.g. employee number)
            amloCheck:
              type: boolean
              example: true
              description: Flag to show if the Anti-Money Laundering Ordinance has been already checked for this customer
            adPermission:
              type: boolean
              example: false
              description: Flag to see if the customer give his/her permission to marketing advertisement
            phoneNumber:
              type: array
              description: Phone numbers of the person
              items:
                $ref: '#/components/schemas/personPhoneNumber'
            email:
              type: array
              description: Email addresses of the person
              items:
                $ref: '#/components/schemas/personEmail'
    # ---------
    # ---- Card Contract ----
    cardContract:
      description: Card Contract Information .
      type: object
      required:
        - cardContractId
      properties:
        cardContractId:
          type: string
          format: uuid
          description: UUID v4 of the card contract
          example: 576f8de3-6b30-4882-a7af-da2132a456cf
        openingDate:
          description: Date when the card contract was created
          type: string
          format: date
          example: 2018-04-13
        purgedDate:
          description: Date that indicates if and when this card contract was purged in the processor system
          type: string
          format: date
          example: 2018-04-13
        cardAccounts:
          type: array
          items: 
            $ref: '#/components/schemas/cardAccount'        
        personId:
          $ref: '#/components/schemas/entityId'        
        contractType:
          $ref: '#/components/schemas/contractType'        
        issuingPartnerId:
          $ref: '#/components/schemas/entityIdName'        
        issuerId:
          $ref: '#/components/schemas/entityIdName'        
        fulfillEntity:
          $ref: '#/components/schemas/entityName'        
        contractStatus:
          $ref: '#/components/schemas/genericStatus'        
    # ---------

    # TODO: define object
    cardAccountbundle:
      description: Card Accountbundle Information.
      type: object
      required:
        - cardAccountbundleId
      properties:
        cardAccountbundleId:
          type: string
          format: uuid
          description: UUID v4 of the card accountbundle
          example: 576f8de3-6b30-4882-a7af-da2132a456cf

    # ---- Card API Model ----
    contractType:
      description: Type of a contract
      type: string
      enum:
      - business
      - corporate
      - consumer
      example: consumer
    entityId:
        type: string
        format: uuid
        description: UUID of an entity 
        example: 1b19aeb0-60db-4160-8551-c37de178ca10
    entityName:
        type: string
        maxLength: 70
        description: Name of an entity 
        example: Abteilung B
    personSurName:
        type: string
        maxLength: 70
        description: Sur name of person 
        example: Muster
    personMiddleName:
        type: string
        maxLength: 70
        description: Middle name of person 
        example: Gustav
    personName:    
        type: string
        maxLength: 70
        description: Name of person 
        example: Max
    personGender:             
      type: string
      enum:
      - male
      - female
      - other
      example: female
      description: Gender of the person.
    personSalutation:             
      type: string
      enum:
      - none
      - mr
      - mrs
      - company
      - male_academic
      - female_academic
      - male_nobility
      - female_nobility
      - neutral
      example: mrs
      description: Salutation for the person.
    language:    
      type: string
      example: fr
      description: Language - for example, preferred contact language
      enum:
      - de
      - fr
      - it
      - en
    personPermit:
      description: Permit of a person
      type: object
      required:
      - permitStatus
      properties:
        permitStatus:
          type: string
          example: B
          description: Permit status
          enum:
          - C
          - B
          - other
        permitSince:
          $ref: '#/components/schemas/date'
    personPhoneNumber:
      description: Phone number of a person
      type: object
      required:
      - phoneNumber
      properties:
        phoneNumberType:
          type: string
          example: mobile
          description: phone number type
          enum:
          - mobile
          - mobile private
          - mobile business
          - fixline
          - fixline private
          - fixline business
          - other
        emailAddress:
          type: string
          maxLength: 30
          example: max.muster@company.ch
          description: Email address 
    personEmail:
      description: Email address of a person
      type: object
      required:
      - emailAddress
      properties:
        emailType:
          type: string
          example: personal
          description: Email type
          enum:
          - personal
          - business
          - other
        emailAddress:
          type: string
          maxLength: 30
          example: max.muster@company.ch
          description: Email address 
    entityIdName:
      description: Issuing entity of the card
      type: object
      required:
      - issuingEntityId
      properties:
        issuingEntityId:
          $ref: '#/components/schemas/entityId'
        name:
          $ref: '#/components/schemas/entityName'

    paymentType:
      type: string
      example: lsv
      description: Identifier of the payment method selected by the person to settle the account. 
      enum:
      - lsv
      - debit_direct
      - esr
      - ipi
      - pos
    paymentOption:
      type: string
      example: full
      description: Identifier of the payment plan selected by the person to pay for a bill. 
      enum:
      - full
      - instalment
      - revolving

    genericStatus:
      description: 
        'Describes the status of a card object.
        Effective: Aggregated effective status on the entity based on directly and inherited status.
        Directly: Directly  applied status on the entity. Note: At a contract level effective status and direct status are the same.
        Inherited: Inherited status on the entity. Note: At a contract level there is no inherited status
        Last Change: Date of the last change of the effective status.'
      type: object
      required: 
      - effective
      properties:
        effective:
          $ref: '#/components/schemas/genericStatusEnum'
        direct:
          $ref: '#/components/schemas/genericStatusEnum'
        inherited:
          $ref: '#/components/schemas/genericStatusEnum'
        last_change:
          $ref: '#/components/schemas/date'
    genericStatusEnum:
      description: Status element 
      type: object
      required: 
      - status
      properties:
        status:
          type: string
          enum:
          - ok
          - nok
          - unknown
          - active
          - blocked
          - suspended_by_person
          - suspended_by_bank
          - suspended_by_issuer
          description: Status type
        detail:
          type: string
          description: 'Status detail in custom text'
    # ---------

    # ---- Common Data Model v1.2.0
    # ---- Date Formats
    date:
      type: string
      format: date
      example: 2018-04-13
    dateTime:
      type: string
      format: date-time
      example: 2018-04-13T11:11:11Z
    # --------
    # ---- Links for Pagination----
    linksPagination:
      description: Links (or cursors) returned in the answer of an API call.
      type: object
      properties:
        self:
          type: string
          description: Link / cursor to the current result set (based on the submitted pagination approach)
          example: /card-app/api/v1/cards?offset=75&limit=25
        first:
          type: string
          description: Link / cursor to the first result set (based on the submitted pagination approach)
          example: /card-app/api/v1/cards?offset=0&limit=25
        previous:
          type: string
          description: Link / cursor to the previous result set (based on the submitted pagination approach)
          example: /card-app/api/v1/cards?offset=50&limit=25
        next:
          type: string
          description: Link / cursor to the next result set (based on the submitted pagination approach)
          example: /card-app/api/v1/cards?offset=100&limit=25
        last:
          type: string
          description: Link / cursor to the last result set (based on the submitted pagination approach)
          example: /card-app/api/v1/cards?offset=150&limit=25
    # ---------

    # ---- Account objects from payment API ----
    paymentQrIbanAccount:
      title: Payment QR-IBAN Account
      type: object
      required:
        - type
        - identification
      properties:
        type:
          type: string
          description: IBAN or QR-IBAN of the creditor.
          enum:
            - "IBAN"
            - "QR_IBAN"
        identification:
          type: string
          maxLength: 34
          example: "CH9300762011623852957"
          pattern: "[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}"
    # ---------

    # ---- Currency ----
    currency:
      description: ISO 4217 code
      type: string
      pattern: '[A-Z]{3}'
      example: CHF
    # ---------

    # ---- Payment Currency Amount compatible to SFTI XS2A API----
    paymentCurrencyAmount:
      title: Payment Currency-Amount
      type: object
      required:
        - currency
        - amount
      properties:
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/amount'

    # ---- Amount ----
    amount:
      type: string
      description: Amount given with fractional digits, the separator is a dot
      pattern: "[0-9]{1,12}([.][0-9]{1,5})?"
      maxLength: 18
      example: "10.25"
    # --------

    # ---- Address compliant to payment address (b.Link & ISO20022)----
    structuredAddress:
      title: Structured Address
      type: object
      required:
        - streetName
        - postCode
        - townName
        - country
      properties:
        streetName:
          type: string
          maxLength: 70
          example: "Rue de la gare"
        buildingNumber:
          type: string
          maxLength: 16
          example: "24"
        postCode:
          type: string
          maxLength: 16
          example: "2501"
        townName:
          type: string
          maxLength: 35
          example: "Biel"
        country:
          type: string
          maxLength: 2
          example: "CH"
    # -----------
    # ---- Country Code ----
    country:
      type: string
      pattern: '[A-Z]{2}'
      example: CH
      description: 2-Letter ISO 3166-2 Country Code
    # ------------
    # ---- Error Response (compliant to SIX b.Link)
    commonErrorResponse:
      title: Common Error Response
      type: object
      properties:
        type:
          $ref: '#/components/schemas/commonErrorType'
        title:
          type: string
          example:
            This is the general problem description
        detail:
          type: string
          example:
            Detailed problem description with respect to the current request
        instance:
          type: string
          example:
            path/to/corresponding/resource

    commonErrorType:
      title: Common Error Type
      description: Error Types for commonErrorResponse.
      type: string
      enum:
        - /problems/INVALID_PAYLOAD
        - /problems/MALFORMED_PAYLOAD
        - /problems/INVALID_TOKEN
        - /problems/EXPIRED_TOKEN
        - /problems/INSUFFICIENT_PRIVILEGES
        - /problems/NO_ACCESS_TO_RESOURCE
        - /problems/RESOURCE_DOES_NOT_EXIST
        - /problems/RESOURCE_NOT_READY
        - /problems/RESOURCE_TOO_LARGE
        - /problems/WRONG_METHOD
        - /problems/OPERATION_NOT_ALLOWED
        - /problems/TECHNICAL_ERROR
        - /problems/NOT_IMPLEMENTED
        - /problems/SERVICE_UNAVAILABLE
      example: '/problems/TECHNICAL_ERROR'
    # ---- End Error Response
    # ---- End Common Data Model

  # ---- Global Common Header Parameters ----
  parameters:
    clientid_in_header:
      in: header
      name: X-CorAPI-Client-ID
      schema:
        type: string
      description: 'ID of the client forwarded to the provider. (SCOPE: FI)'
      required: true
    
    correlation_in_header:
      in: header
      name: X-Correlation-ID
      schema:
        type: string
      description: Unique ID (defined by the caller) which will be reflected back in the response.
      required: true
    
    agent_in_header:
      in: header
      name: User-Agent
      schema:
        type: string
      description: Name and version of the of the Client software
      required: true
    
    offset:
      name: offset
      in: query
      description: Optional parameter for pagination. The number of items to skip before starting to collect the result set.
      required: false
      schema:
        type: integer
        format: int32
        example: 25
        minimum: 0
    
    cardConsentId:
      in: header
      name: cardConsentId
      description: Identifier for a consent that must have been given to allow data access.
      required: true
      schema:
        type: string
    
    cardId:
      name: cardId
      in: query
      required: false
      schema:
        type: string
        format: uuid
        example: 7306fd9b-9df5-4f68-9d03-2c3674f48086
      description: Card ID
    
    personId:
      name: personId
      in: query
      required: false
      schema:
        type: string
        format: uuid
        example: 73065f9b-8cf5-4f68-9d03-2c3674f48086
      description: Person ID
    
    cardAccountId:
      name: cardAccountId
      in: query
      description: Uuid v4 of a specific existing card account
      required: false
      example: bcb5d762-8d28-43a2-9398-393b2e8d56ba
      schema:
        type: string
        format: uuid

    card-accountbundleId:
      name: card-accountbundleId
      in: query
      required: false
      schema:
        type: string
        format: uuid
        example: 73065f9b-8cf5-4f68-9d03-2c3674f48086

    transactionId:
      name: transactionId
      in: query
      required: false
      schema:
        type: string
        format: uuid
        example: 73065f9b-8cf5-4f68-9d03-2c3674f48086

    statementId:
      name: statementId
      in: query
      required: false
      schema:
        type: string
        format: uuid
        example: 73065f9b-8cf5-4f68-9d03-2c3674f48086
    
    cardContractId:
      name: cardContractId
      in: query
      description: Uuid v4 of a specific existing card contract
      required: false
      example: bcb5d762-8d28-43a2-9398-393b2e8d56ba
      schema:
        type: string
        format: uuid
    
    limit:
      name: limit
      in: query
      description: Optional parameter for pagination. Maximum number of entries to be returned.
      required: false
      schema:
        type: integer
        format: int32
        example: 25
        minimum: 1
    cursor:
      name: cursor
      in: query
      description: Optional parameter for pagination. An opaque string value used for pagination.
      required: false
      schema:
        type: string
        example: cursorIDxyz
  # ---- Responses - Standard Errors Common Data Model v1.2.2----
  responses:
    standard400:
      headers:
        Content-Type:
          schema:
            type: string
            description: 'application/problem+json; charset=utf-8 according to RFC7807'
            example: application/problem+json
        Content-Language:
          schema:
            type: string
            description: 'Response language - always en'
            example: en
        X-Correlation-ID:
          schema:
            type: string
            description: Client defined ID from request to correlates HTTP requests between a client and server.
            example: f058ebd6-02f7-4d3f-942e-904344e8cde5
      description: Bad Request - The server cannot or will not process the request due to something that is perceived to be a client error as malformed request syntax.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/commonErrorResponse'
    standard401:
      headers:
        Content-Type:
          schema:
            type: string
            description: 'application/problem+json; charset=utf-8 according to RFC7807'
            example: application/problem+json
        Content-Language:
          schema:
            type: string
            description: 'Response language - always en'
            example: en
        X-Correlation-ID:
          schema:
            type: string
            description: Client defined ID from request to correlates HTTP requests between a client and server.
            example: f058ebd6-02f7-4d3f-942e-904344e8cde5
      description: Unauthorized - The request has not been applied because it lacks valid authentication credentials for the target resource.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/commonErrorResponse'
    standard403:
      headers:
        Content-Type:
          schema:
            type: string
            description: 'application/problem+json; charset=utf-8 according to RFC7807'
            example: application/problem+json
        Content-Language:
          schema:
            type: string
            description: 'Response language - always en'
            example: en
        X-Correlation-ID:
          schema:
            type: string
            description: Client defined ID from request to correlates HTTP requests between a client and server.
            example: f058ebd6-02f7-4d3f-942e-904344e8cde5
      description: Forbidden - The server understood the request but refuses to authorize it.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/commonErrorResponse'
    standard404:
      headers:
        Content-Type:
          schema:
            type: string
            description: 'application/problem+json; charset=utf-8 according to RFC7807'
            example: application/problem+json
        Content-Language:
          schema:
            type: string
            description: 'Response language - always en'
            example: en
        X-Correlation-ID:
          schema:
            type: string
            description: Client defined ID from request to correlates HTTP requests between a client and server.
            example: f058ebd6-02f7-4d3f-942e-904344e8cde5
      description: Not Found - The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/commonErrorResponse'
    standard405:
      headers:
        Content-Type:
          schema:
            type: string
            description: 'application/problem+json; charset=utf-8 according to RFC7807'
            example: application/problem+json
        Content-Language:
          schema:
            type: string
            description: 'Response language - always en'
            example: en
        X-Correlation-ID:
          schema:
            type: string
            description: Client defined ID from request to correlates HTTP requests between a client and server.
            example: f058ebd6-02f7-4d3f-942e-904344e8cde5
      description: Method Not Allowed - The method received in the request-line is known by the origin server but not supported by the target resource.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/commonErrorResponse'
    standard500:
      headers:
        Content-Type:
          schema:
            type: string
            description: 'application/problem+json; charset=utf-8 according to RFC7807'
            example: application/problem+json
        Content-Language:
          schema:
            type: string
            description: 'Response language - always en'
            example: en
        X-Correlation-ID:
          schema:
            type: string
            description: Client defined ID from request to correlates HTTP requests between a client and server.
            example: f058ebd6-02f7-4d3f-942e-904344e8cde5
      description: Internal Server Error - The server encountered an unexpected condition that prevented it from fulfilling the request.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/commonErrorResponse'
    standard501:
      headers:
        Content-Type:
          schema:
            type: string
            description: 'application/problem+json; charset=utf-8 according to RFC7807'
            example: application/problem+json
        Content-Language:
          schema:
            type: string
            description: 'Response language - always en'
            example: en
        X-Correlation-ID:
          schema:
            type: string
            description: Client defined ID from request to correlates HTTP requests between a client and server.
            example: f058ebd6-02f7-4d3f-942e-904344e8cde5
      description: Not Implemented - The server does not support the functionality required to fulfill the request.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/commonErrorResponse'
    standard503:
      headers:
        Content-Type:
          schema:
            type: string
            description: 'application/problem+json; charset=utf-8 according to RFC7807'
            example: application/problem+json
        Content-Language:
          schema:
            type: string
            description: 'Response language - always en'
            example: en
        X-Correlation-ID:
          schema:
            type: string
            description: Client defined ID from request to correlates HTTP requests between a client and server.
            example: f058ebd6-02f7-4d3f-942e-904344e8cde5
      description: Service Unavailable. The server is currently unable to handle the request due to a temporary overload or scheduled maintenance.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/commonErrorResponse'
  # ---- End Responses - Standard Errors
